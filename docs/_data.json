[
  {
    "block": "arrow",
    "data": [
      {
        "md": "<h3>Default arrow</h3>\n\n<div class=\"highlight\"><pre lang=\"\">nb-arrow()\n</pre></div>\n\n<ul>\n<li>search: 'true'</li>\n<li>buttonContent: 'Найти'</li>\n</ul>\n\n<h3>Options</h3>\n\n<ul>\n<li>search: true() — display search form</li>\n</ul>\n\n<div class=\"test\">!!</div>\n\n<ul>\n<li>href: ... — URL for service arrow link</li>\n<li>action: ... — action URL for search form</li>\n<li>text: ... — text for service arrow or link rendered before search input</li>\n<li>buttonContent: ... — text for form field's 'submit' button</li>\n<li>value: ... — placeholder for search field</li>\n<li>requests: ... — info about unber of request with this search field</li>\n</ul>\n\n<h3>Examples</h3>\n\n<p>No inputs, with name of service:</p>\n\n<div class=\"highlight\"><pre lang=\"\">nb-arrow({\n    'search': 'false'\n    'href': '#'\n    'text': 'Диск'\n})\n</pre></div>\n\n<p>Arrow with search form, no placeholder text:</p>\n\n<div class=\"highlight\"><pre lang=\"\">nb-arrow({\n    'search': 'true'\n})\n</pre></div>\n\n<p>Arrow with search form, prefilled and with requests info:</p>\n\n<div class=\"highlight\"><pre lang=\"\">nb-arrow({\n    'search': 'true'\n    'requests': '8 млн ответов'\n    'value': 'жираф'\n})\n</pre></div>\n\n<p>Arrow with search form and namelink enabled:</p>\n\n<div class=\"highlight\"><pre lang=\"\">nb-arrow({\n    'search': 'true'\n    'href': '#'\n    'text': 'Диск'\n})\n</pre></div>"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb-block"
          }
        ],
        "description": {
          "full": "<p>Add a shadow to wrapper and hide info about requests</p>\n\n<div class=\"highlight\"><pre lang=\" \">arrow.focus()\n</pre></div>",
          "summary": "<p>Add a shadow to wrapper and hide info about requests</p>",
          "body": "<div class=\"highlight\"><pre lang=\" \">arrow.focus()\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n        if (!this.$wrap.hasClass('nb-arrow__name__wrap_focus')) {\n            this.$wrap.addClass('nb-arrow__name__wrap_focus');\n        }\n        this.$requests.fadeOut('fast');\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb-block"
          }
        ],
        "description": {
          "full": "<p>Remove a shadow from wrapper and show info about requests</p>\n\n<div class=\"highlight\"><pre lang=\"\">arrow.blur();\n</pre></div>",
          "summary": "<p>Remove a shadow from wrapper and show info about requests</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">arrow.blur();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n        this.$wrap.removeClass('nb-arrow__name__wrap_focus');\n        this.$node.find('.nb-arrow__input_fake').text(this.$node.find('.nb-input').attr('value'));\n        this.$requests.fadeIn('fast');\n        return this;\n    }\n}, 'base');"
      }
    ]
  },
  {
    "block": "button",
    "data": [
      {
        "md": "<h3>Default button</h3>\n\n<div class=\"highlight\"><pre lang=\"\">nb-button()\n</pre></div>\n\n<ul>\n<li><code>size: m</code></li>\n<li><code>theme: normal</code></li>\n</ul>\n\n<h3>Optional attributes</h3>\n\n<ul>\n<li><code>'size'</code> {string} <code>'s' / 'm' / 'l'</code></li>\n<li><code>'theme'</code> {string} <code>'normal' / 'action' (yellow) / 'dark' / 'pseudo' / 'promo' (big yellow)</code></li>\n<li><code>'id'</code> {string} ...</li>\n<li><code>'name'</code> {string} ...</li>\n<li><code>'class'</code> {array} <code>['my_class1', 'my_class2']</code> — additional classes</li>\n<li><code>'disabled'</code> {boolean} — disabled button</li>\n<li><code>'icon'</code> {string} ... — link to icon</li>\n<li><code>'iconText'</code> {string} ... — symbol for icon</li>\n<li><code>'content'</code> {string} ... — content of button</li>\n<li><code>'attrs'</code> {object} <code>{'type': 'submit', 'attr2: 'value2' }</code> — custom DOM attributes for button</li>\n<li><code>'static'</code> {boolean} — block without nanoblocks functionality (JavaScript API)</li>\n<li><code>'type'</code> {string} <code>'file'</code> — attach button. This is not DOM type aka <code>&lt;input type=\"\"/&gt;</code>, this is instance type.</li>\n<li><code>'href'</code> {string} — button with <code>&lt;a href=''&gt;</code></li>\n</ul>\n\n<h4>Example</h4>\n\n<p>Action buttom, size L with custom classes</p>\n\n<div class=\"highlight\"><pre lang=\"\">nb-button({\n    'size': 'l'\n    'theme': 'action'\n    'id': 'id1'\n    'class': [\n        'my_class1'\n        'my_class2'\n    ]\n    'content': 'Hello World'\n    'attrs': {\n        'name': 'my_name'\n     }\n})\n</pre></div>"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "text",
            "description": "- text for the button"
          },
          {
            "type": "fires",
            "string": "'nb-text-set'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "block for chaining"
          }
        ],
        "description": {
          "full": "<p>Set text of the button</p>\n\n<div class=\"highlight\"><pre lang=\"\">    button.setText('Hello, world!');\n</pre></div>",
          "summary": "<p>Set text of the button</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">    button.setText('Hello, world!');\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setText: function(text) {\n        if (this.$node && this.$node.data('uiButton')) {\n            this.$node.find('.nb-button__text').html(text);\n            this.trigger('nb-text-set', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "String"
            ],
            "description": "text of the button"
          }
        ],
        "description": {
          "full": "<p>Get text of the button</p>\n\n<div class=\"highlight\"><pre lang=\"\">    button.setText('Hello, world!');\n    button.getText(); // --> 'Hello, world!'\n</pre></div>",
          "summary": "<p>Get text of the button</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">    button.setText('Hello, world!');\n    button.getText(); // --> 'Hello, world!'\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getText: function() {\n        return this.$node.find('.nb-button__text').html();\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "href",
            "description": "- link for the button"
          },
          {
            "type": "fires",
            "string": "'nb-url-set'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "block for chaining"
          }
        ],
        "description": {
          "full": "<p>Set href of the link button</p>\n\n<div class=\"highlight\"><pre lang=\"\">button.setUrl('yandex.ru');\n</pre></div>",
          "summary": "<p>Set href of the link button</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">button.setUrl('yandex.ru');\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setUrl: function(href) {\n        this.$node.attr('href', href);\n        this.trigger('nb-url-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "String"
            ],
            "description": "text of the button"
          }
        ],
        "description": {
          "full": "<p>Get href of the link button</p>\n\n<div class=\"highlight\"><pre lang=\"\">button.setUrl('yandex.ru');\nbutton.getUrl(); // --> yandex.ru\n</pre></div>",
          "summary": "<p>Get href of the link button</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">button.setUrl('yandex.ru');\nbutton.getUrl(); // --> yandex.ru\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getUrl: function() {\n        return this.$node.attr('href');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "blocks for chaining"
          }
        ],
        "description": {
          "full": "<p>Disable the button</p>\n\n<div class=\"highlight\"><pre lang=\"\">button.disable();\n</pre></div>",
          "summary": "<p>Disable the button</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">button.disable();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n        if (this.$node && this.$node.data('uiButton')) {\n            this.$node.button('disable');\n            this.$node.addClass('nb-is-disabled');\n            this.trigger('nb-disabled', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "blocks for chaining"
          }
        ],
        "description": {
          "full": "<p>Enables the button</p>\n\n<div class=\"highlight\"><pre lang=\"\">button.enable();\n</pre></div>",
          "summary": "<p>Enables the button</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">button.enable();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n        if (this.$node && this.$node.data('uiButton')) {\n            this.$node.button('enable');\n            this.$node.removeClass('nb-is-disabled');\n            this.trigger('nb-enabled', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Boolean"
            ],
            "description": ""
          }
        ],
        "description": {
          "full": "<p>Return state of the button</p>\n\n<div class=\"highlight\"><pre lang=\"\">button.isEnabled(); // --> true (by default)\n\nbutton.disable();\nbutton.isEnabled(); // --> false\n</pre></div>",
          "summary": "<p>Return state of the button</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">button.isEnabled(); // --> true (by default)\n\nbutton.disable();\nbutton.isEnabled(); // --> false\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n        return !this.$node.prop(\"disabled\");\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-focus'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "blocks for chaining"
          }
        ],
        "description": {
          "full": "<p>Focus the button</p>\n\n<div class=\"highlight\"><pre lang=\"\">button.focus();\n</pre></div>",
          "summary": "<p>Focus the button</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">button.focus();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n        if (this.isEnabled()) {\n            this.$node.focus();\n        }\n        this.trigger('nb-focused', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-blured'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "blocks for chaining"
          }
        ],
        "description": {
          "full": "<p>Blur the button</p>\n\n<div class=\"highlight\"><pre lang=\"\">button.blur();\n</pre></div>",
          "summary": "<p>Blur the button</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">button.blur();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n        if (this.isEnabled()) {\n            this.$node.blur();\n        }\n        this.trigger('nb-blured', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the button</p>\n\n<div class=\"highlight\"><pre lang=\"\">button.destroy();\n</pre></div>",
          "summary": "<p>Destroy the button</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">button.destroy();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n        // вызвали destroy в одном методе, но ссылка на кнопку была сохранена в другом\n        // в результате повторный вызов и ошибка в консоли\n        if (this.$node && this.$node.data('uiButton')) {\n            this.$node.button('destroy');\n        }\n        this.trigger('nb-destroyed', this);\n        this.nbdestroy();\n    }\n}, 'base');"
      }
    ]
  },
  {
    "block": "checkbox",
    "data": [
      {
        "md": "<h3>Default checkbox</h3>\n\n<div class=\"highlight\"><pre lang=\"\">nb-checkbox()\n</pre></div>\n\n<ul>\n<li><code>size</code> — m</li>\n<li><code>type</code> — checkbox</li>\n</ul>\n\n<h3>Optional attributes</h3>\n\n<ul>\n<li><code>'size'</code> {string} <code>'s'</code> / <code>'m'</code></li>\n<li><code>'id'</code> {string}...</li>\n<li><code>'name'</code> {string}...</li>\n<li><code>'class'</code> {array} <code>['my_class1', 'my_class2']</code> — additional classes</li>\n<li><code>'type'</code> {string} <code>'checkbox'</code> / <code>'radio'</code> / <code>'button'</code></li>\n<li><code>'disabled'</code> {boolean} — disabled button</li>\n<li><code>'value'</code> {string} — value</li>\n<li><code>'tabindex'</code> {string} — tabindex</li>\n<li><code>'checked'</code> {string} <code>'normal' / 'action' (yellow) / 'dark' / 'pseudo' / 'promo' (big yellow)</code> — theme for button type</li>\n<li><code>'theme'</code> {boolean} <code>'checkbox'</code> / <code>'radio'</code> / <code>'button'</code> — checked button</li>\n<li><code>'content'</code> {string} — text (or custom html) of the label, can be string or <code>xml</code> <em>xss warning!</em></li>\n<li><code>'attrs'</code> {object} <code>{'attr2': 'value2'}</code> — custom DOM attributes for checkbox input</li>\n</ul>\n\n<h4>Example</h4>\n\n<p>Action buttom, size L with custom classes</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-checkbox({\n        'type': 'radio'\n        'content': 'Паук'\n        'attrs': {\n            'name': 'biotype'\n        }\n    })\n\n</pre></div>"
      },
      {
        "tags": [
          {
            "type": "augments",
            "otherClass": "nb.block.Base"
          }
        ],
        "description": {
          "full": "<p>@class nb.block.Checkbox</p>",
          "summary": "<p>@class nb.block.Checkbox</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "nb.define('checkbox', {\n    events: {\n        'change input': 'onchange'\n    },\n\n    _onCheckboxChecked: function(evtName, params) {\n        if (params.name == this.getName() && params.value != this.getValue()) {\n            this.uncheck();\n        }\n    },\n\n    onchange: function() {\n        if (this.$control.prop('checked')) {\n            this.check();\n        } else {\n            this.uncheck();\n        }\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-inited'"
          },
          {
            "type": "constructor",
            "string": ""
          }
        ],
        "description": {
          "full": "<p>Init a checkbox</p>",
          "summary": "<p>Init a checkbox</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "oninit: function() {\n        this.$control = this.$node.find('input[type]');\n        this._isChecked = this.$control.prop('checked');\n\n        this.$control.on('click.nb-checkbox', function(evt) {\n            evt.stopPropagation();\n        });\n\n        // emulates \"change\" event for IE<9\n        // IE<9 triggers \"change\" only after \"blur\"\n        if (document['documentMode'] && document['documentMode'] < 9) {\n            var that = this;\n            this.$control.on('propertychange.nb-checkbox', function(e) {\n                if (e.originalEvent.propertyName === 'checked') {\n                    that.onchange();\n                }\n            });\n        }\n\n        if (this.getType() === 'radio') {\n            nb.on('checkbox:checked', $.proxy(this._onCheckboxChecked, this));\n        }\n\n        this.trigger('nb-inited', this);\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String} — type of control"
          }
        ],
        "description": {
          "full": "<p>Override base getType()</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.getType(); // --> checkbox | radio\n</pre></div>",
          "summary": "<p>Override base getType()</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.getType(); // --> checkbox | radio\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getType: function() {\n        return this.$control.attr('type');\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return check state of the checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.isChecked(); // --> false (by default)\n\ncheckbox.check();\ncheckbox.isChecked(); // --> true\n</pre></div>",
          "summary": "<p>Return check state of the checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.isChecked(); // --> false (by default)\n\ncheckbox.check();\ncheckbox.isChecked(); // --> true\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isChecked: function() {\n        return this._isChecked;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-checked', 'nb-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Checking checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.check();\n</pre></div>",
          "summary": "<p>Checking checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.check();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "check: function() {\n        if (!this.isEnabled()) {\n            return this;\n        }\n        if (this.getType() === 'radio') {\n            nb.trigger('checkbox:checked', {\n                name: this.getName(),\n                value: this.getValue()\n            });\n        }\n\n        var isChecked = this.isChecked();\n\n        this.$control.prop({\n            'indeterminate': false,\n            'checked': true\n        });\n\n        this._isChecked = true;\n        this.trigger('nb-checked', this);\n\n        if (!isChecked) {\n            this.trigger('nb-changed', this);\n        }\n\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-unchecked', 'nb-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Unchecking checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.uncheck();\n</pre></div>",
          "summary": "<p>Unchecking checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.uncheck();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "uncheck: function() {\n        if (!this.isEnabled()) {\n            return this;\n        }\n\n        var isChecked = this.isChecked();\n\n        this.$control.prop({\n            'indeterminate': false,\n            'checked': false\n        });\n\n        this._isChecked = false;\n        this.trigger('nb-unchecked', this);\n\n        if (isChecked) {\n            this.trigger('nb-changed', this);\n        }\n\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'change'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb.block"
          }
        ],
        "description": {
          "full": "<p>Toggle to the opposite state checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.toggle();\n</pre></div>",
          "summary": "<p>Toggle to the opposite state checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.toggle();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "toggle: function() {\n        if (!this.isEnabled()) {\n            return this;\n        }\n\n        this.trigger('nb-change', this);\n\n        if (this.isChecked()) {\n            this.uncheck();\n        } else {\n            this.check();\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return indeterminate state of the checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.isIndeterminate();\n</pre></div>",
          "summary": "<p>Return indeterminate state of the checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.isIndeterminate();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isIndeterminate: function() {\n        return this.$control.prop('indeterminate');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-indeterminated'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set indeterminate state of the checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.setIndeterminate();\n</pre></div>",
          "summary": "<p>Set indeterminate state of the checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.setIndeterminate();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setIndeterminate: function() {\n        if (this.isEnabled()) {\n            this.$control.prop('indeterminate', true);\n            this.trigger('nb-indeterminated', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-determinated'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set determinate state of the checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.setDeterminate();\n</pre></div>",
          "summary": "<p>Set determinate state of the checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.setDeterminate();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setDeterminate: function() {\n        if (this.isEnabled()) {\n            this.$control.prop('indeterminate', false);\n            this.trigger('nb-determinated', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return enable state of the checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.isEnabled();\n</pre></div>",
          "summary": "<p>Return enable state of the checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.isEnabled();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n        return !this.$control.prop('disabled');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Enable the checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.enable();\n</pre></div>",
          "summary": "<p>Enable the checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.enable();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n        if (!this.isEnabled()) {\n            this.$node.removeClass('nb-is-disabled');\n            this.$control.removeAttr('disabled');\n            this.trigger('nb-enabled', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Disable the checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.disable();\n</pre></div>",
          "summary": "<p>Disable the checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.disable();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n        if (this.isEnabled()) {\n            this.blur();\n            this.$node.addClass('nb-is-disabled');\n            this.$control.attr('disabled', 'disabled');\n            this.trigger('nb-disabled', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-focused'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Focus the checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.focus();\n</pre></div>",
          "summary": "<p>Focus the checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.focus();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n        this.$control.focus();\n        this.trigger('nb-focused', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-blured'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Blur the checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.blur();\n</pre></div>",
          "summary": "<p>Blur the checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.blur();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n        this.$control.blur();\n        this.trigger('nb-blured', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Number"
            ],
            "name": "label",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-label-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Sets label of the checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.setLabel();\n</pre></div>",
          "summary": "<p>Sets label of the checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.setLabel();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setLabel: function(label) {\n        this.$node.find('.nb-checkbox__label').html(label);\n        this.trigger('nb-label-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String | Number}"
          }
        ],
        "description": {
          "full": "<p>Gets label of the checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.getLabel(); // --> ...\n</pre></div>",
          "summary": "<p>Gets label of the checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.getLabel(); // --> ...\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getLabel: function() {\n        return this.$node.find('.nb-checkbox__label').html();\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String|Object} name"
          }
        ],
        "description": {
          "full": "<p>Get name of the checkbox or radio</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.getName(); // --> ...\n</pre></div>",
          "summary": "<p>Get name of the checkbox or radio</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.getName(); // --> ...\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getName: function() {\n        return this.$control.prop('name');\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Number"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-name-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set checkbox's name</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.setName('sex');\n</pre></div>",
          "summary": "<p>Set checkbox's name</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.setName('sex');\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setName: function(value) {\n        this.$control.attr('name', value);\n        this.trigger('nb-name-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String}"
          }
        ],
        "description": {
          "full": "<p>Returns checkbox value</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.getValue();\n</pre></div>",
          "summary": "<p>Returns checkbox value</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.getValue();\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getValue: function() {\n        var valueAttr = this.$control.attr('value');\n        if (typeof valueAttr === 'string') {\n            return valueAttr;\n        } else {\n            // checkbox without @value has .value === 'on'\n            // this is standard browser behavour\n            return 'on';\n        }\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Number"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-value-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set checkbox value</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.setValue('male');\n</pre></div>",
          "summary": "<p>Set checkbox value</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.setValue('male');\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setValue: function(value) {\n        this.$control.attr('value', value);\n        this.trigger('nb-value-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy checkbox</p>\n\n<div class=\"highlight\"><pre lang=\"\">checkbox.destroy('');\n</pre></div>",
          "summary": "<p>Destroy checkbox</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">checkbox.destroy('');\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n        this.$control.off('.nb-checkbox');\n        if (this.getType() === 'radio') {\n            nb.off('checkbox:checked', $.proxy(this._onCheckboxChecked, this));\n        }\n        this.trigger('nb-destroyed', this);\n        this.nbdestroy();\n    }\n\n}, 'base');"
      }
    ]
  },
  {
    "block": "common",
    "data": [
      {
        "tags": [
          {
            "type": "augments",
            "otherClass": "Block"
          }
        ],
        "description": {
          "full": "<p>@class nb.block.Base</p>",
          "summary": "<p>@class nb.block.Base</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "nb.define('base', {\n    events: {\n        'init': '_oninit'\n    },"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>@constuctor</p>",
          "summary": "<p>@constuctor</p>",
          "body": ""
        },
        "ignore": false,
        "code": "_oninit: function() {\n        this.$node = $(this.node);\n\n        if (this.oninit) {\n            this.oninit();\n        }\n    },"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>@returns {String} type of block</p>",
          "summary": "<p>@returns {String} type of block</p>",
          "body": ""
        },
        "ignore": true,
        "code": "getType: function() {\n        return this.$node.attr('data-nb');\n    }\n});"
      }
    ]
  },
  {
    "block": "dropzone",
    "data": [
      {
        "md": "<h3>Default dropzone</h3>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-dropzone()\n</pre></div>\n\n<ul>\n<li><code>button</code>\n<ul><li><code>size</code> - <code>s</code></li>\n<li><code>type</code> - <code>file</code></li>\n<li><code>theme</code> - <code>pseudo</code></li>\n<li><code>class</code> - <code>nb-dropzone__button</code></li></ul></li>\n</ul>\n\n<h3>Options</h3>\n\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {string} — additional classes['my_class1', 'my_class2'] </li>\n<li><code>type</code> {string} — <code>modal</code> (use with <em>paranja</em>)</li>\n<li><code>head</code> {string} — drop zone title</li>\n<li><code>text</code> {string} — text to the left of the \"Select file\" button</li>\n<li><code>button</code> {nodeset|boolean} — <code>false()</code> to render dropzone without 'select file' button; check out <em>button</em> documentation for list of options</li>\n</ul>\n\n<h3>Example</h3>\n\n<p>Drop zone with all elements possible text:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-dropzone({\n       'head': 'Upload files'\n       'text': 'To upload, drag files here or'\n       'button' : {\n           'size': 's'\n           'content': 'select files'\n           'type': 'file'\n           'theme': 'pseudo'\n           'class': 'nb-dropzone__button'\n       }\n    })\n</pre></div>\n\n<p>Minimal dropzone:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-dropzone({\n        'text': 'Drop files here to upload them'\n        'button': 'false'\n    })\n</pre></div>\n\n<p>No-affordance dropzone — just empty rectangle (don't do this!):</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-dropzone({\n        'button': 'false'\n    })\n</pre></div>\n\n<h3>Initialization</h3>\n\n<p>Initialize nb block on DOM node:</p>\n\n<div class=\"highlight\"><pre lang=\"\">\n    nb.block(node);\n\n</pre></div>\n\n<p>Initialize all nb blocks with class '_init' within DOM node</p>\n\n<div class=\"highlight\"><pre lang=\"\">\n    nb.init(node);\n\n</pre></div>\n\n<h3>Dropzone methods</h3>\n\n<p>None declared.</p>"
      }
    ]
  },
  {
    "block": "gap",
    "data": [
      {
        "md": "<p>If you need to have gaps between any blocks, you can use global <code>nb-gap_SIDE_SIZE</code> classes.</p>\n\n<h3>Sides</h3>\n\n<p>Sides are <code>top</code>, <code>right</code>, <code>bottom</code> and <code>left</code>, each such class would add the margin of the given <code>SIZE</code> at the corresponding side:</p>\n\n<pre><code>'class': ['nb-gap_top_SIZE']\n\n'class': ['nb-gap_right_SIZE']\n\n'class': ['nb-gap_bottom_SIZE']\n\n'class': ['nb-gap_left_SIZE']\n</code></pre>\n\n<h3>Sizes</h3>\n\n<p>There are a few of possible preset sizes for gaps: <code>xs</code>, <code>s</code>, <code>m</code> and <code>l</code>. Each side have a modifier for each size, creating classes like <code>nb-gap_top_xs</code> etc.</p>\n\n<pre><code>'class': ['nb-gap_SIDE_xs']\n\n'class': ['nb-gap_SIDE_s']\n\n'class': ['nb-gap_SIDE_m']\n\n'class': ['nb-gap_SIDE_l']\n</code></pre>"
      }
    ]
  },
  {
    "block": "group",
    "data": [
      {
        "md": "<p>If you need to have groups consisting of any number of buttons and/or inputs in any order, you can mix them with <code>nb-group-…</code> global classes to achieve the desired behaviour.</p>\n\n<h3>Group wrapper</h3>\n\n<ul>\n<li><code>class</code> - <code>['nb-group']</code></li>\n</ul>\n\n<p>To make sure your group's items won't wrap you would want to use <code>.nb-group</code> class for their wrapper.</p>\n\n<h3>Group items</h3>\n\n<ul>\n<li><code>class</code> - <code>['nb-group-item']</code></li>\n</ul>\n\n<p>This is a class for generic group items, when you don't know their position. Such classes would work only if all the items have the same wrapper and have no other blocks in it.</p>\n\n<h3>Specific group items</h3>\n\n<ul>\n<li><code>class</code> - <code>['nb-group-start']</code></li>\n<li><code>class</code> - <code>['nb-group-middle']</code></li>\n<li><code>class</code> - <code>['nb-group-end']</code></li>\n</ul>\n\n<p>When you have other blocks before or after the grouped items, or you can't have a common wrapper for them, or they're placed not in straight order in the HTML, you could use more specific classes, telling where in the group your block is.</p>\n\n<h3>Complex group items</h3>\n\n<p>In some cases you would have the button/input which visuals you'd like to adjust to be nested inside other blocks and at the same time you couldn't tell which item is first and which is last.</p>\n\n<p>In that case you could use complex group items:</p>\n\n<ul>\n<li><code>class</code> - <code>['nb-complex-group-item']</code></li>\n<li><code>class</code> - <code>['nb-complex-group-item-subject']</code></li>\n</ul>\n\n<p>The <code>.nb-complex-group-item</code> class should be placed at the top level items, while the <code>nb-complex-group-item-subject</code> one should be placed at the actual inputs/items inside.</p>"
      }
    ]
  },
  {
    "block": "header",
    "data": [
      {
        "tags": [],
        "description": {
          "full": "<p>Toggles pressed state of button</p>",
          "summary": "<p>Toggles pressed state of button</p>",
          "body": ""
        },
        "ignore": true,
        "code": "togglePress: function(e) {\n        var $target = $(e.target);\n        $target.closest('.nb-header__button').toggleClass('nb-header__button_pressed');\n\n        if ($target.hasClass('nb-icon_services')) {\n            nb.trigger('services-click');\n        }\n\n        if ($target.hasClass('nb-icon_settings')) {\n            nb.trigger('settings-click');\n        }\n    }\n}, 'base');"
      }
    ]
  },
  {
    "block": "icon",
    "data": [
      {
        "md": "<p>You have to explicitly pass icon name to nb-icon()</p>\n\n<ul>\n<li><code>size</code> — <code>m</code></li>\n</ul>\n\n<h3>Options</h3>\n\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes ['my_class1', 'my_class2']</li>\n<li><code>icon</code> {string} — icon name (_TODO: List available icon names with descriptions)</li>\n<li><code>size</code> {string} — icon size, <code>s</code> or <code>m</code></li>\n</ul>\n\n<h3>Examples</h3>\n\n<p>Small icon:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-icon({\n        'icon': 'link'\n        'size': 's'\n    })\n</pre></div>\n\n<p>Medium-sized icon:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-icon({\n        'icon': 'link'\n    })\n</pre></div>\n\n<h3>JS</h3>\n\n<p>None declared.</p>"
      }
    ]
  },
  {
    "block": "input",
    "data": [
      {
        "md": "<div class=\"highlight\"><pre lang=\"\">    nb-input(options)\n</pre></div>\n\n<h3>Options</h3>\n\n<ul>\n<li><code>'id'</code> {string}</li>\n<li><code>'name'</code> {string}</li>\n<li><code>'attrs'</code> {object} - attrubutes for input node</li>\n<li><code>'content'</code> {string|xml} - <code>value</code> of the input</li>\n<li><code>'type'</code> {string} — <code>'multiline'</code> textarea</li>\n<li><code>'ghost'</code> {boolean} — ghost mode input</li>\n<li><code>'disabled'</code> {boolean}</li>\n<li><code>'size'</code> {string}  - input size. <code>'s'</code> (no other sizes supported)</li>\n<li><code>'error'</code> {object} <code>{content: 'error content', direction: 'right|left'}</code></li>\n<li><code>'leftContent'</code> {string|xml} — content of the left field of input</li>\n<li><code>'rightContent'</code> {string|xml} — content of the right field of input</li>\n<li><code>'hint'</code> {string | Object} — content of hint or <code>{ text: '...', ghost: true() }</code> for ghost hint</li>\n</ul>\n\n<h3>Examples</h3>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-input({\n        'size': 's'\n        'hint': 'Введите пароль'\n        'attrs': {\n            'type': 'password'\n        }\n    })\n</pre></div>"
      },
      {
        "tags": [
          {
            "type": "augments",
            "otherClass": "nb.block.Base"
          }
        ],
        "description": {
          "full": "<p>@class nb.block.Input</p>",
          "summary": "<p>@class nb.block.Input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "nb.define('input', {\n    events: {\n        'click': 'focus',\n        'mousedown .nb-input__reset': 'reset',\n        'focusin': 'focus',\n        'focusout': 'blur'\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-inited'"
          },
          {
            "type": "constructor",
            "string": ""
          }
        ],
        "description": {
          "full": "<p>Init input</p>",
          "summary": "<p>Init input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "oninit: function() {\n        var that = this;\n\n        this.data = this.nbdata();\n\n        if (this.data.type == 'simple') {\n            this.$control = this.$node;\n        } else {\n            this.$control = this.$node.find('.nb-input__controller');\n        }\n\n        this.disabled = this.$control.prop('disabled');\n        that.getValue();\n\n        this.$control.on('change', function(e) {\n            that.trigger('nb-changed', this, e);\n        });\n\n        this.$hint = this.$node.find('.nb-input__hint');\n\n        if (this.$hint.length) {\n            this._inithint();\n        }\n\n        this.focused = false;\n        if (this.data.ghost) {\n            this.$node.on('mouseover mouseout', function() {\n                that.$node.toggleClass('is-ghost');\n            });\n        }\n\n        if (this.data.error) {\n            this.error = nb.find(this.data.error.id);\n        }\n\n        nb.on('is-focusedout', function() {\n            that.blur();\n        });\n\n        this.trigger('nb-inited', this);\n    },\n\n    _inithint: function() {\n        var that = this;\n\n        this.$hintGhost = this.$hint.find('.nb-input__hint-ghost');\n\n        if (this.$hintGhost.length) {\n\n            this.$hintGhost.html(that.getValue());\n\n            this.$control.on('input', function() {\n                that.$hintGhost.html(that.getValue());\n            });\n\n            this.$control.on('focus', function() {\n                that.$hint.css('visibility', 'hidden');\n            });\n\n            this.$control.on('blur', function() {\n                that.$hint.css('visibility', 'inherit');\n            });\n        } else {\n            this.$control.on('input', function() {\n                if (that.getValue() === '') {\n                    that.$hint.css('visibility', 'inherit');\n                } else {\n                    that.$hint.css('visibility', 'hidden');\n                }\n            });\n        }\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object",
              "String"
            ],
            "name": "params",
            "description": "optional params of error popup or contentof Error"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Show inputs error</p>",
          "summary": "<p>Show inputs error</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "showError: function(params) {\n        var params = params || {};\n\n        if (this.data.error) {\n            this.$node.addClass('is-wrong');\n            var how = {\n                collision: 'flip flip',\n                autoclose: false\n            };\n\n            if (this.data.error.direction && this.data.error.direction == 'left') {\n                how.at = \"left\";\n                how.my = \"right\";\n\n            } else {\n                how.at = \"right\";\n                how.my = \"left\";\n            }\n\n            if (typeof params === 'string') {\n                this.setErrorContent(params);\n            }\n\n            if (params.content) {\n                this.setErrorContent(params.content);\n            }\n\n            if (!this.error.isOpen()) {\n                this.error.open({\n                    autoclose: params.autoclose || false,\n                    where: params.where || this.node,\n                    how: params.how || how,\n                    appendTo: params.appendTo || false\n                });\n            }\n\n\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Hide inputs error</p>",
          "summary": "<p>Hide inputs error</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "hideError: function() {\n        if (this.data.error) {\n            this.$node.removeClass('is-wrong');\n            this.error.close();\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "string"
            ],
            "name": "content",
            "description": "- content for error"
          },
          {
            "type": "fires",
            "string": "'nb-error-content-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set content of inputs error</p>",
          "summary": "<p>Set content of inputs error</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setErrorContent: function(content) {\n        if (this.data.error) {\n            this.error.$node.find('.nb-popup__content').html(content);\n            this.trigger('nb-error-content-set', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-focused'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Focus the input</p>",
          "summary": "<p>Focus the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n        if (!this.isEnabled()) {\n            return this;\n        }\n\n        if (!this.focused) {\n            nb.trigger('nb-input_focusout');\n            this.$node.addClass('nb-is-focused');\n\n            if (this.data.ghost) {\n                this.$node.removeClass('is-ghost');\n            }\n\n            this.focused = true;\n            this.$control.get(0).focus();\n            this.trigger('nb-focused', this);\n            return this;\n        }\n\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-blured'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Blur the input</p>",
          "summary": "<p>Blur the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n        this.$node.removeClass('nb-is-focused');\n\n        if (this.data.ghost) {\n            this.$node.addClass('is-ghost');\n        }\n\n        this.focused = false;\n        this.trigger('nb-blured', this);\n\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Disables the input</p>",
          "summary": "<p>Disables the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n        this.$node.addClass('nb-is-disabled');\n        this.$control.prop('disabled', true);\n        this.trigger('nb-disabled', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Enables the input</p>",
          "summary": "<p>Enables the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n        this.$node.removeClass('nb-is-disabled');\n        this.$control.prop('disabled', false);\n        this.trigger('nb-enabled', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Object"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-value-set', 'nb-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set value of the input</p>",
          "summary": "<p>Set value of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setValue: function(value) {"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>Check newValue and actualValue to avoid recursion</p>\n\n<pre><code>    nbInput.on('nb-changed', function() {\n        var validValue = validate(this.getValue());\n        this.setValue(validValue);\n    });\n</code></pre>",
          "summary": "<p>Check newValue and actualValue to avoid recursion</p>",
          "body": "<pre><code>    nbInput.on('nb-changed', function() {\n        var validValue = validate(this.getValue());\n        this.setValue(validValue);\n    });\n</code></pre>"
        },
        "ignore": false,
        "code": "if (this.value != value) {\n            this.value = value;\n            this.$control.val(value);\n            this.$control.trigger('input');\n            this.trigger('nb-value-set', this);\n            this.trigger('nb-changed', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String|Object} value"
          }
        ],
        "description": {
          "full": "<p>Get value of the input</p>",
          "summary": "<p>Get value of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getValue: function() {\n        // get actual value from <input/> and save it to instance\n        this.value = this.$control.val();\n        return this.value;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String|Object} name"
          }
        ],
        "description": {
          "full": "<p>Get name of the input</p>",
          "summary": "<p>Get name of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getName: function() {\n        return this.$control.prop('name');\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Object"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-name-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set name of the input</p>",
          "summary": "<p>Set name of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setName: function(value) {\n        this.$control.attr('name', value);\n        this.trigger('nb-name-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return state of the input</p>",
          "summary": "<p>Return state of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n        return !this.$control.prop('disabled');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-value-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Resets value of the input</p>",
          "summary": "<p>Resets value of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "reset: function(evt) {\n        if (evt && evt.preventDefault) {\n            evt.preventDefault();\n        }\n\n        this.setValue('');\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-hint-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set hint of the input</p>",
          "summary": "<p>Set hint of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setHint: function(value) {\n        if (this.$hint.length) {\n            if (this.$hintGhost.length) {\n                this.$hint.find('.nb-input__hint-content').html(value);\n            } else {\n                this.$hint.find('.nb-input__hint-inner').html(value);\n            }\n            this.trigger('nb-hint-set', this);\n        }\n\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String} hint"
          }
        ],
        "description": {
          "full": "<p>Get hint of the input</p>",
          "summary": "<p>Get hint of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getHint: function() {\n        var value = '';\n        if (this.$hint.length) {\n\n            if (this.$hintGhost.length) {\n                value = this.$hint.find('.nb-input__hint-content').html();\n            } else {\n                value = this.$hint.find('.nb-input__hint-inner').html();\n            }\n\n        }\n        return value;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the button</p>",
          "summary": "<p>Destroy the button</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n        this.trigger('nb-destroyed', this);\n        if (this.error) {\n            this.error.nbdestroy();\n            this.error.$node.remove();\n        }\n        this.nbdestroy();\n    }\n}, 'base');"
      }
    ]
  },
  {
    "block": "input-group",
    "data": [
      {
        "md": "<div class=\"highlight\"><pre lang=\"\">    nb-input-group()\n</pre></div>\n\n<p>Renders compound group of text input field and button, ordered accordingly to <code>options</code>.</p>\n\n<h3>Options</h3>\n\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>disabled</code> {boolean} — disable both inputs</li>\n<li><code>input</code> {string} — options for text input field</li>\n<li><code>button</code> {string} — options for button</li>\n</ul>\n\n<p>NB: For description of <code>button</code> and <code>input</code> see corresponding docs</p>\n\n<h3>Examples</h3>\n\n<p>A button with an icon, then a text input field:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-input-group({\n        'button' : {\n            'size': 's'\n            'icon': 'link'\n        }\n        'input' : {\n            'size': 's'\n            'content': '<a href='http://yadi.sk/'>http://yadi.sk/</a>'\n        }\n    })\n</pre></div>\n\n<p>A group of an input field and a button with text, disabled altogether as a whole:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-input-group({\n        'input' : {\n            'size': 's'\n            'attrs': {\n                'placeholder': 'Speak and...'\n            }\n        }\n        'button' : {\n            'size': 's'\n            'content': 'spell.'\n        }\n        'disabled' : true()\n    })\n</pre></div> "
      },
      {
        "tags": [],
        "description": {
          "full": "<p>Disables the input-group</p>",
          "summary": "<p>Disables the input-group</p>",
          "body": ""
        },
        "ignore": true,
        "code": "onDisable: function() {\n        this.input.trigger('disable');\n        this.button.disable();\n        this.disabled = true;\n    },"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>Enables the input-group</p>",
          "summary": "<p>Enables the input-group</p>",
          "body": ""
        },
        "ignore": true,
        "code": "onEnable: function() {\n        this.input.trigger('enable');\n        this.button.enable();\n        this.disabled = false;\n    }\n}, 'base');"
      }
    ]
  },
  {
    "block": "island",
    "data": [
      {
        "md": "<div class=\"highlight\"><pre lang=\"\">    nb-island()\n</pre></div>\n\n<h3>Options</h3>\n\n<ul>\n<li><code>padding</code> {string} — s / m / l</li>\n<li><code>type</code> {string} — inline / fly</li>\n<li><code>content</code> {xml|string} — island's content, can be string or <code>xml</code> <em>xss warning!</em></li>\n</ul>\n\n<h3>Examples</h3>\n\n<p>Basic island:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-island({\n        'content': 'Остров миу-миу'\n    })\n</pre></div>\n\n<p>Flying island with an M-sized padding:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-island({\n        'content': 'Летающий остров'\n        'type': 'fly'\n        'padding': 'm'\n    })\n</pre></div>\n\n<p>Inline island with an L-sized padding:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-island({\n        'content': 'Остров с паддингами и инлайном'\n        'padding': 'l'\n        'type':  'inline'\n    })\n</pre></div>"
      }
    ]
  },
  {
    "block": "loader",
    "data": [
      {
        "md": "<div class=\"highlight\"><pre lang=\"\">    nb-loader()\n</pre></div>\n\n<ul>\n<li><code>size</code>: <code>m</code></li>\n</ul>\n\n<h3>Options</h3>\n\n<ul>\n<li><code>color</code> {string} — spinner color, black by default, <code>while</code> is the only alternate option</li>\n<li><code>size</code> {string} — spinner size — s / m / l</li>\n</ul>\n\n<h3>Examples</h3>\n\n<p>Small loader:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-loader({\n        'size': 's'\n        'attrs': {\n            'data-id': '1'\n        }\n    })\n</pre></div>\n\n<p>Medium loader:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-loader({\n        'attrs': {\n            'data-id': '1'\n        }\n    })\n</pre></div>\n\n<p>White medium loader on white background:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-loader({\n        'color': 'white'\n        'attrs': {\n            'data-id': '1'\n        }\n    })\n</pre></div>"
      }
    ]
  },
  {
    "block": "paranja",
    "data": [
      {
        "md": "<div class=\"highlight\"><pre lang=\"\">    nb-paranja()\n</pre></div>\n\n<ul>\n<li><code>theme</code> — dark</li>\n</ul>\n\n<h3>Options</h3>\n\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>attrs</code> {object} — custom DOM attributes, e.g.: <code>{ 'attr2: 'value2' }</code></li>\n<li><code>theme</code> {string} — light / dark</li>\n<li><code>content</code> {xml, string} — can be string or <code>xml</code> <em>xss warning!</em></li>\n</ul>\n\n<h3>Examples</h3>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-paranja({\n        'theme': 'light'\n        'content': '<div>Surprise!</div>'\n    })\n</pre></div>"
      }
    ]
  },
  {
    "block": "popup",
    "data": [
      {
        "md": "<div class=\"highlight\"><pre lang=\"\">    nb-popup()\n</pre></div>\n\n<h3>Options for generic popup</h3>\n\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>attrs</code> {object} — custom DOM attributes, e.g.: <code>{ 'attr2: 'value2', 'attr2: 'value2' }</code></li>\n<li><code>tail</code> {string} — position of 'tail' widget — left|right|top|bottom</li>\n<li><code>titleContent</code> {xml|string} —  modal's title, can be string or <code>xml</code> <em>xss warning!</em></li>\n<li><code>content</code> {xml|string} — modal's content, can be string or <code>xml</code> <em>xss warning!</em></li>\n</ul>\n\n<h3>Example of generic popup</h3>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-popup({\n        'id': 'genericPopup'\n        'tail': 'top'\n        'title': 'Hello, I'm your generic pop-up.'\n        'content': '<p>And welcome to nanoislands</p>'\n    })\n</pre></div>\n\n<h3>Default menu popup</h3>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-popup-menu()\n</pre></div>\n\n<h3>Options for menu popup</h3>\n\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>attrs</code> {object} — custom DOM attributes</li>\n<li><code>tail</code> {string} — position of 'tail' widget — left|right|top|bottom</li>\n<li><code>static</code> {boolean} — <code>true()</code> to prevent initialisation</li>\n<li><code>menu</code> {array} — array of objects:\n<ul><li>Object for menu element:\n<ul><li><code>href</code> {string}</li>\n<li><code>text</code> {string}</li></ul></li>\n<li>Object for separator:\n<ul><li><code>separator</code> {boolean} — <code>true()</code> to render separator</li></ul></li></ul></li>\n</ul>\n\n<h3>Menu popup example</h3>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-popup-menu({\n        'id': 'popupMenu'\n        'tail': 'left'\n        'menu': [\n            {\n                'href': '#'\n                'content': 'Скопировать'\n            }\n            {\n                'href': '#'\n                'content': 'Переместить'\n            }\n            {\n                'href': '#'\n                'content': 'Удалить'\n            }\n        ]\n    })\n</pre></div>\n\n<h3>Default modal popup</h3>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-popup-modal()\n</pre></div>\n\n<ul>\n<li><code>data-nb</code> {object}\n<ul><li><code>modal</code>: <code>true()</code></li>\n<li><code>width</code>: <code>auto</code></li>\n<li><code>height</code>: <code>auto</code></li>\n<li><code>minHeight</code>: <code>auto</code></li></ul></li>\n</ul>\n\n<h3>Options for modal popup</h3>\n\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>attrs</code> {object} — custom DOM attributes</li>\n<li><code>titleContent</code> {xml|string} — modal's title, can be string or <code>xml</code> <em>xss warning!</em></li>\n<li><code>content</code> {xml|string} — modal's content, can be string or <code>xml</code> <em>xss warning!</em></li>\n<li><code>buttons</code> {xml|array} — popup's buttons:</li>\n<li><code>close</code> {nodeset} — popup's close button:\n<ul><li><code>attrs</code> {object} — custom DOM attributes for close button</li></ul></li>\n<li><code>data-nb</code> {object} — popup display paramenters, renteded as <code>data-nb-*</code> attributes\n<ul><li><code>modal</code> {boolean}</li>\n<li><code>width</code> {string}</li>\n<li><code>height</code> {string}</li>\n<li><code>minHeight</code> {string}</li></ul></li>\n</ul>\n\n<h3>Modal popup example:</h3>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-popup-modal({\n       'id': 'modalPopup'\n       'title': 'Some modal popup'\n       'content': 'Some text for that popup'\n       'data-nb': {\n            'width': '300px'\n       }\n       'close': {\n            'class': 'ns-action'\n            'attrs': {\n                'data-params': '123'\n            }\n       }\n       'buttons': {\n            'class': 'ns-subliew-buttons'\n            'data': [\n            {\n               'content': 'Отправить'\n               'size': 'm'\n               'theme': 'action'\n               'class': 'nb-popup__button'\n            }\n            {\n               'content': 'Сохранить'\n               'size': 'm'\n               'class': 'nb-popup__button'\n            }\n        ]}\n\n   })\n\n</pre></div>"
      },
      {
        "tags": [],
        "description": {
          "full": "<h3>jQuery UI Depends</h3>\n\n<ul>\n<li>jquery.ui.dialog.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.draggable.js</li>\n<li>jquery.ui.mouse.js</li>\n<li>jquery.ui.position.js</li>\n</ul>",
          "summary": "<h3>jQuery UI Depends</h3>",
          "body": "<ul>\n<li>jquery.ui.dialog.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.draggable.js</li>\n<li>jquery.ui.mouse.js</li>\n<li>jquery.ui.position.js</li>\n</ul>"
        },
        "ignore": true,
        "code": "(function() {\n\n    // Надстройки nb над jQueryUI\n    $.nb = {};\n\n    $.widget('nb.baseDialog', $.ui.dialog, {\n        options: {\n            height: 'auto',\n            minHeight: 'auto',\n            width: 'auto'\n        },\n        open: function() {\n            this._super();\n            var that = this;\n\n            if (!this.options.modal) {\n                this._onmousedown = function(e) {\n                    that.options.closedByOuterClick = true;\n                    // e.which === 3 -> right mouse button\n                    // e.which === 2 -> middle (wheel) mouse button\n                    if (e.which === 2 || e.which === 3) {\n                        return;\n                    }\n\n                    if ($.contains(that.uiDialog[0], e.target)) {\n                        return;\n                    }\n\n                    if (that.options.autoclose) {\n                        that.close();\n                    }\n                };\n\n                this.document.on('mousedown', this._onmousedown);\n                this.document.on('touchstart', this._onmousedown);\n            }\n\n            if (this.options.position.fixed) {\n                this._onresize = $.proxy(this._position, this, true);\n                this.window.on('resize', this._onresize);\n            }\n\n\n            this._onpopupclose = nb.on('popup-close', function() {\n                if (that.options.autoclose) {\n                    that.close();\n                }\n            });\n        },\n        close: function() {\n            this._super();\n            this.document.off('mousedown', this._onmousedown);\n            this.document.off('touchstart', this._onmousedown);\n\n            if (this._onresize) {\n                this.window.off('resize', this._onresize);\n            }\n\n            nb.off('popup-close', this._onpopupclose);\n        },\n        _create: function() {\n            this.options.dialogClass += _getUIDialogExtraClass.call(this);\n            this.options.dialogClass += (this.options.position.fixed) ? ' ui-dialog-fixed' : '';\n            this._super();\n            this.element[0].widget = this;\n        },\n        _destroy: function() {\n            this._super();\n            delete this.element[0].widget;\n        },\n        _position: function() {\n            var that = this;\n            var using = this.options.position.using;\n\n            // Перестановка базового опорного свойства.\n            this.options.position.using = function(props, ui) {\n                var position = $.extend({}, props);\n                var width;\n                var height;\n\n                if (ui.vertical == 'bottom') {\n                    height = that.window.height();\n\n                    position.bottom = height - (position.top + ui.element.height);\n                    position.top = 'auto';\n                }\n\n                if (ui.horizontal == 'right') {\n                    width = that.window.width();\n\n                    position.right = width - (position.left + ui.element.width);\n                    position.left = 'auto';\n                }\n\n                return using.call(ui.element.element[0], position, ui);\n            };\n\n            this._super();\n\n            this.options.position.using = using;\n        },\n        _createTitlebar: function() {\n            this.uiDialogTitlebarClose = $();\n        }\n    });\n\n    // диалог с хвостиком\n    $.widget('nb.contextDialog', $.nb.baseDialog, {\n\n        tailOffset: 13,\n\n        options: {\n            tail: 'center',\n            height: 'auto',\n            minHeight: 'auto',\n            width: 'auto',\n            show: {\n                effect: 'nb',\n                duration: 150\n            },\n            hide: {\n                effect: 'nb',\n                duration: 150\n            },\n            draggable: false,\n            resizable: false,\n            dialogClass: 'nb-popup-outer ui-dialog-no-close',\n            position: {\n                my: 'center top',\n                at: 'center bottom',\n                // horizontal: fit, пытаемся уместить в window\n                // vertical: flip - выбирает наилучший вариант - вверх или вних\n                collision: \"fit flip\"\n            }\n        },\n\n        _create: function() {\n            this._super();\n            var $tail = $('<div class=\"nb-popup__tail\"><i/></div>');\n\n            if (this.options.tail != 'center') {\n                $tail.addClass('nb-popup__tail_to_' + this.options.tail);\n            }\n\n            //TODO: проверить, что вызывается один раз\n            $tail.prependTo(this.uiDialog);\n        },\n        _position: function(noEffect) {\n            var that = this;\n            var using = this.options.position.using;\n\n            // При повторном позиционировании попапа без его скрытия\n            // не произойдет вызова эффекта `nb`. Поэтому нет необходимости\n            // дополнительно смещать попап, чтобы обеспечить простор для\n            // анимации.\n            var offsetMultiplier = noEffect ? 1 : 2;\n\n            var inversion = {\n                top: 'bottom',\n                bottom: 'top',\n                left: 'right',\n                right: 'left'\n            };\n\n            this.options.position.using = function(props, ui) {\n                var $el = ui.element.element;\n                var el = $el[0];\n\n                var tail = ui[ui.important];\n                var direction = inversion[tail];\n\n                nb.node.setMod(el, 'nb-popup_to', direction);\n                $el.data('nb-tail-dir', direction);\n\n                props[tail] += (that.tailOffset * offsetMultiplier);\n\n                return using.call(el, props, ui);\n            };\n\n            this._super();\n\n            this.options.position.using = using;\n        }\n    });\n\n    jQuery.effects.effect.nb = function(o, done) {\n        var $this = $(this);\n        var mode = $.effects.setMode($this, o.mode || \"hide\");\n        var tailDir = $this.data('nb-tail-dir');\n\n        var res = {\n            show: {\n                'bottom': {\n                    opacity: 1,\n                    top: '-=' + $.nb.contextDialog.prototype.tailOffset\n                },\n                'top': {\n                    opacity: 1,\n                    bottom: '-=' + $.nb.contextDialog.prototype.tailOffset\n                },\n                'left': {\n                    opacity: 1,\n                    right: '-=' + $.nb.contextDialog.prototype.tailOffset\n                },\n                'right': {\n                    opacity: 1,\n                    left: '-=' + $.nb.contextDialog.prototype.tailOffset\n                }\n            },\n            hide: {\n                'bottom': {\n                    opacity: 0,\n                    top: '+=' + $.nb.contextDialog.prototype.tailOffset\n                },\n                'top': {\n                    opacity: 0,\n                    bottom: '+=' + $.nb.contextDialog.prototype.tailOffset\n                },\n                'left': {\n                    opacity: 0,\n                    right: '+=' + $.nb.contextDialog.prototype.tailOffset\n                },\n                'right': {\n                    opacity: 0,\n                    left: '+=' + $.nb.contextDialog.prototype.tailOffset\n                }\n            }\n        };\n\n        if (mode == 'show') {\n            $this.show();\n        }\n\n        $this.animate(res[mode][tailDir], {\n            queue: false,\n            duration: o.duration,\n            easing: o.easing,\n            complete: function() {\n                if (mode == 'hide') {\n                    $this.hide();\n                }\n                done();\n            }\n        });\n    };"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>Функция возвращает строку с модификаторами<br /> для обертки попапа, которую добавляет jquery ui,<br /> в соответсвии с модификаторами самого попапа</p>\n\n<p>Например, для попапа заданы классы-модификаторы nb-popup_mod и nb-popup_another-mod,<br /> функция вернет строку 'nb-popup-outer_mod nb-popup-outer_another-mod'</p>",
          "summary": "<p>Функция возвращает строку с модификаторами<br /> для обертки попапа, которую добавляет jquery ui,<br /> в соответсвии с модификаторами самого попапа</p>",
          "body": "<p>Например, для попапа заданы классы-модификаторы nb-popup_mod и nb-popup_another-mod,<br /> функция вернет строку 'nb-popup-outer_mod nb-popup-outer_another-mod'</p>"
        },
        "ignore": true,
        "code": "function _getUIDialogExtraClass() {\n        var popupClasses = this.element.attr('class').split(' ') || [];\n        // не матчимся на _ в начале слова\n        // иначе это глобальный класс,\n        // не мачимся на __, чтобы ислючить элемент\n        var modRe = /\\w+\\_(?!_)/;\n        var uiDialogClasses;\n\n        uiDialogClasses = $.map(popupClasses, function(item) {\n            var parts = item.split(modRe);\n            var l = parts.length;\n            var modifier = parts.pop();\n            var newClass = '';\n\n            // в массиве должно быть больше 1 элемента\n            // иначе модификатора не было\n            if (l > 1) {\n                newClass = 'nb-popup-outer_' + modifier;\n            }\n\n            return newClass;\n        });\n\n        return uiDialogClasses.join(' ');\n    }\n\n\n    nb.define('popup', {\n\n        events: {\n            'click .nb-popup__close': 'close',\n            'position': 'onposition'\n        },\n\n        // ----------------------------------------------------------------------------------------------------------------- //\n        oninit: function() {\n            var data = this.nbdata();\n\n            if ('modal' in data) {\n                this.modal = true;\n            }\n\n            // Храним исходное положение попапа, чтобы возвращать его на место\n            var previous = this.node.previousSibling;\n            this._home = previous ? { previous: previous } : { parent: this.node.parentNode };\n        },\n\n        onposition: function(e, params) {\n            var where = params.where;\n            var how = params.how;\n            this._move(where, how, params);\n        },",
        "ctx": {
          "type": "function",
          "name": "_getUIDialogExtraClass",
          "string": "_getUIDialogExtraClass()"
        }
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "params",
            "description": "settings for popup"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb.block"
          }
        ],
        "description": {
          "full": "<p>Open popup</p>\n\n<div class=\"highlight\"><pre lang=\"\">popup.open({\n    where: [100, 200],\n    how: 'top bottom'\n});\n</pre></div>",
          "summary": "<p>Open popup</p>",
          "body": "<div class=\"highlight\"><pre lang=\"\">popup.open({\n    where: [100, 200],\n    how: 'top bottom'\n});\n</pre></div>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "open: function(params) {\n            var where = params.where;\n            var how = params.how;\n\n            //  Специальный флаг-костыль.\n            //  Если он true, то это значит, что мы только что передвинули открытый попап в другое место\n            //  и его не нужно закрывать на клик.\n            this.moved = false;\n\n            if (this.where) {\n                //  Попап уже открыт\n                //  FIXME: Буэээ. Уродливое условие для варианта, когда заданы координаты вместо ноды.\n                if (where === this.where || ( (where instanceof Array) && where[0] === this.where[0] && where[1] === this.where[1] )) {\n                    //  На той же ноде. Значит закрываем его.\n                    this.close();\n                } else {\n                    this.moved = true;\n                    //  На другой ноде. Передвигаем его в нужное место.\n                    this._move(where, how, params);\n                }\n            } else {\n                //  Попап закрыт. Будем открывать.\n\n                $(this.node).removeClass('nb-is-hidden');\n                //  Передвигаем попап.\n                this._move(where, how, params);\n                this.trigger('nb-opened');\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb.block"
          }
        ],
        "description": {
          "full": "<p>Close popup</p>",
          "summary": "<p>Close popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "close: function() {\n\n            //  Снимаем флаг о том, что попап открыт.\n            this.where = null;\n\n            if (this.isOpen()) {\n                this.node.widget.close();\n                this.trigger('nb-closed');\n            }\n\n            // if popup closed by document click we also should fire event\n            if (this.node && this.node.widget && this.node.widget.options.closedByOuterClick) {\n                this.node.widget.options.closedByOuterClick = false;\n                this.trigger('nb-closed');\n            }\n\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Boolean"
            ],
            "description": ""
          }
        ],
        "description": {
          "full": "<p>Returns true if the popup is opened</p>",
          "summary": "<p>Returns true if the popup is opened</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isOpen: function() {\n            return this.node && this.node.widget && this.node.widget.isOpen();\n        },"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>Destroy the popup</p>",
          "summary": "<p>Destroy the popup</p>",
          "body": ""
        },
        "ignore": false,
        "code": "destroy: function() {\n            if (this.node && this.node.widget) {\n                this.node.widget.destroy();\n            }\n\n            this.trigger('nb-destroyed', this);\n            this.nbdestroy();\n        },\n\n        // ----------------------------------------------------------------------------------------------------------------- //\n\n        _move: function(where, how, params) {\n            //  Запоминаем, на какой ноде мы открываем попап.\n            this.where = where;\n            var that = this;\n\n            var data = this.nbdata();\n            // по умолчанию попап позиционирова абсолютно\n            var isFixed = false;\n\n            // сделаем попап фиксированным, если\n            // у popup-toggler задан how.fixed = true\n            if (how && how.fixed) {\n                isFixed = true;\n            }\n            // или если был задан атрибут data-nb-how = 'fixed'\n            // в настройках самого попапа\n            if (data.how == 'fixed') {\n                isFixed = true;\n            }\n\n            var using = function(props) {\n                var $el = $(this);\n\n                if (params.animate) {\n                    $el.stop().animate(props, {\n                        duration: 'fast',\n                        queue: false,\n                        complete: $.proxy(that.trigger, that, 'position.complete')\n                    });\n                } else {\n                    $el.css(props);\n                }\n            };\n\n            how = how || {};\n\n            //  Модальный попап двигать не нужно.\n            if (this.modal) {\n                $(this.node).baseDialog({\n                    height: data.height,\n                    minHeight: data.minheight,\n                    width: data.width,\n                    show: 'fade',\n                    hide: 'fade',\n                    modal: true,\n                    resizable: false,\n                    draggable: false,\n                    dialogClass: 'nb-popup-outer ui-dialog-fixed',\n                    close: function() {\n                        that.close();\n                    },\n                    appendTo: params.appendTo,\n                    position: {\n                        using: using\n                    },\n                    autoclose: typeof how.autoclose !== 'undefined' ? how.autoclose : true\n                });\n\n                return;\n            }\n\n\n            $(this.node).contextDialog({\n                tail: data.tail,\n                position: {\n                    // где попап\n                    at: (how.at ? how.at : 'center bottom'),// + ' center',\n                    // где ссылка, которая открыла попап\n                    my: (how.my ? how.my : 'center top'),// + ' center',\n                    fixed: isFixed,\n                    of: $(this.where),\n                    // horizontal: fit, пытаемся уместить в window\n                    // vertical: flip - выбирает наилучший вариант - вверх или вних\n                    collision: (how.collision ? how.collision : 'fit flip'),\n                    using: using\n                },\n                close: function() {\n                    that.close();\n                },\n                appendTo: params.appendTo,\n                autoclose: typeof how.autoclose !== 'undefined' ? how.autoclose : true\n            });\n        }\n    }, 'base');\n})();\n\n// ----------------------------------------------------------------------------------------------------------------- //\n\nnb.define('popup-toggler', {\n\n    events: {\n        'click': 'open'\n    },\n\n    oninit: function() {\n        this.data = this.nbdata()['popup-toggler'];\n        this.popup = nb.find(this.data['id']);\n        this.options = {\n            //  Относительно чего позиционировать попап.\n            //  Если заданы точные координаты в `data.where`, то по ним.\n            //  Иначе относительно ноды этого блока.\n            where: this.data.where || this.node,\n\n            //  Как позиционировать попап.\n            how: this.data.how,\n\n            // Куда его вставлять\n            appendTo: this.data.appendTo\n        };\n        this.trigger('nb-inited', this);\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-opened'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Open popup</p>",
          "summary": "<p>Open popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "open: function(evt) {\n        if (evt) {\n            evt.preventDefault();\n        }\n        if (!this.$node.hasClass('nb-is-disabled') && this.popup) {\n            this.popup.open(this.options);\n            this.trigger('nb-opened', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-closed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Close popup</p>",
          "summary": "<p>Close popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "close: function() {\n        if (!this.$node.hasClass('nb-is-disabled') && this.popup) {\n            this.popup.close();\n            this.trigger('nb-closed', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Returns connected popup</p>",
          "summary": "<p>Returns connected popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getPopup: function() {\n        return this.popup;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "params",
            "description": "- {"
          },
          {
            "type": "",
            "string": "id : 'id' — popupID or link to nb.block"
          },
          {
            "type": "",
            "string": "where: '#elem' — to what elem popup attached"
          },
          {
            "type": "",
            "string": "how: { my: 'left', at:'right' } — to to open popup"
          },
          {
            "type": "",
            "string": "}"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Sets connected popup</p>",
          "summary": "<p>Sets connected popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setPopup: function(params) {\n        if (typeof params === 'string') {\n            var obj = {};\n            obj.popup = params;\n            params = obj;\n        }\n\n        if (arguments.length === 1 && typeof params === 'object' && params.popup) {\n            var id = params.popup;\n            delete params.popup;\n\n            if (params.where) {\n                this.options = params;\n            }\n\n            if (typeof id === 'string') {\n                this.popup = nb.find(id);\n            } else {\n                this.popup = id;\n            }\n            this.trigger('nb-popup-set', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Object} options"
          }
        ],
        "description": {
          "full": "<p>Get connected popup  option</p>",
          "summary": "<p>Get connected popup  option</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getOptions: function() {\n        return this.options;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "params",
            "description": "- {"
          },
          {
            "type": "",
            "string": "where: '#elem' — to what elem popup attached"
          },
          {
            "type": "",
            "string": "how: { my: 'left', at:'right' } — to to open popup"
          },
          {
            "type": "",
            "string": "}"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Sets connected popup options</p>",
          "summary": "<p>Sets connected popup options</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setOptions: function(params) {\n        if (arguments.length === 1 && typeof params === 'object') {\n            this.options = params;\n            this.trigger('nb-options-set', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the popup toggler</p>",
          "summary": "<p>Destroy the popup toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n        this.nbdestroy();\n    }\n\n}, 'base');"
      }
    ]
  },
  {
    "block": "progress",
    "data": [
      {
        "md": "<div class=\"highlight\"><pre lang=\"\">    nb-progress()\n</pre></div>\n\n<ul>\n<li><code>bar</code>: <code>true()</code></li>\n<li><code>start</code>: <code>0</code></li>\n<li><code>type</code>: <code>percentage</code></li>\n<li><code>title</code>: <code></code></li>\n</ul>\n\n<h3>Options</h3>\n\n<ul>\n<li><code>bar</code> {boolean} — <code>false()</code> to display percentage text only</li>\n<li><code>title</code> {string} — text to be displayed in a progress-bar instead of a percentage ticker</li>\n<li><code>start</code> {number} — start value</li>\n<li><code>type</code> {string} — <code>title</code> to display title instead of pecentage</li>\n</ul>\n\n<h3>Examples</h3>\n\n<p>Progress indicator with progressbar and ticking percentage, initialised at 0%:</p>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-progress({\n        'id': 'progress2'\n    })\n\n</pre></div>\n\n<p>Same thing, but in title mode and starting at 30%:</p>\n\n<div class=\"highlight\"><pre lang=\"\">\n    nb-progress({\n        'id': 'progress1'\n        'start': '30'\n        'type': 'title'\n        'title': 'Король_Лев_5_rutracker.org'\n    })\n\n</pre></div>\n\n<h2>JS</h2>\n\n<h3>Initialisation</h3>\n\n<p>Initialize nb block on DOM node:</p>\n\n<div class=\"highlight\"><pre lang=\"\">\n    nb.block(node);\n\n</pre></div>\n\n<p>Initialize all nb blocks with class '_init' within DOM node</p>\n\n<div class=\"highlight\"><pre lang=\"\">\n    nb.init(node);\n\n</pre></div>\n\n<h3>Methods</h3>\n\n<div class=\"highlight\"><pre lang=\"\">/**\n* Set value of the progress\n* @param {String|Number} value\n* @fires 'nb-value-set'\n* @returns {Object} nb.block\n*/\nprogress.setValue(30)\n\n/**\n* Get value of the progress\n* @returns {String} value\n*/\nprogress.getValue();\n\n/**\n* Change value of the progress by 1\n* @fires 'nb-progress_value-changed'\n* @returns {Object} nb.block\n*/\nprogress.tick();\n</pre></div>"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Number"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-value-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set value of the progress</p>",
          "summary": "<p>Set value of the progress</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setValue: function(value) {\n        var val = parseFloat(value);\n\n        this.$control.val(val);\n        this.$bar.css({width: val + '%'});\n\n        if (this.type == 'percentage') {\n            this.$title.html(val + '%');\n        }\n        this.trigger('nb-value-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String} value"
          }
        ],
        "description": {
          "full": "<p>Get value of the progress</p>",
          "summary": "<p>Get value of the progress</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getValue: function() {\n        return this.$control.val();\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Change value of the progress by 1</p>",
          "summary": "<p>Change value of the progress by 1</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "tick: function() {\n        var val = parseFloat(this.getValue());\n\n        if (val < 100) {\n            val++;\n        }\n\n        this.setValue(val);\n        this.trigger('nb-changed', this);\n\n        return this;\n    }\n}, 'base');"
      }
    ]
  },
  {
    "block": "radio-button",
    "data": [
      {
        "md": "<ul>\n<li>Horizontal compound block</li>\n<li>consists of several buttons</li>\n<li>behaves like a group of radio-buttons</li>\n</ul>\n\n<p>To get a group of actial <em>radiobuttons</em> (like those you can get using vanilla HTML) use <code>checkbox</code> with corresponding options.</p>\n\n<h3>Basic usage example:</h3>\n\n<div class=\"highlight\"><pre lang=\"\">    nb-radio-button({\n        'name': 'btn'\n        'group':  [\n            {\n                'content': 'Foo'\n                'value': 'btn1'\n            }\n            {\n                'content': 'Bar'\n                'value': 'btn3'\n            }\n            {\n                'content': 'Baz'\n                'value': 'btn4'\n            }\n            {\n                'content': 'Quux'\n                'value': 'btn2'\n            }\n        ]\n    })\n</pre></div>\n\n<p>Default options:</p>\n\n<ul>\n<li>size: m</li>\n<li>theme: normal</li>\n</ul>\n\n<h3>Options</h3>\n\n<ul>\n<li><code>'id'</code> {string}</li>\n<li><code>'size'</code> {string} <code>s / m / l</code></li>\n<li><code>'theme'</code> {string} <code>normal / action (yellow) / dark / pseudo / promo (big yellow)</code></li>\n<li><code>'class'</code> {array}  — additional classes for radio-button</li>\n<li><code>'group'</code> {array} — array of hashes, each hash describes a button:\n<ul><li><code>'content'</code> {string} ... — string of button's content</li>\n<li><code>'value'</code> {string}... — corresponding value</li>\n<li><code>'name'</code> {string} ... — name for radio-button</li>\n<li><code>'icon'</code> {string} ... — icon name</li>\n<li><code>'checked'</code> {boolean} — checked element of radio-group</li>\n<li><code>'disabled'</code> {boolean}  — for disabled element</li></ul></li>\n</ul>"
      },
      {
        "tags": [],
        "description": {
          "full": "<h3>jQuery UI Depends:</h3>\n\n<ul>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n</ul>",
          "summary": "<h3>jQuery UI Depends:</h3>",
          "body": "<ul>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n</ul>"
        },
        "ignore": false,
        "code": "nb.define('radio-button', {\n    oninit: function() {\n        this.control = this.$node.buttonset();\n    }\n}, 'base');"
      }
    ]
  },
  {
    "block": "select",
    "data": [
      {
        "md": "<div class=\"highlight\"><pre lang=\"\">    nb-select()\n</pre></div>\n\n<ul>\n<li>size: m</li>\n<li>theme: normal</li>\n<li>direction: bottom</li>\n</ul>\n\n<h3>Optional attributes</h3>\n\n<ul>\n<li><code>'size'</code> {string} <code>m / s</code></li>\n<li><code>'theme'</code> {string} <code>normal / action (yellow) / dark / pseudo</code></li>\n<li><code>'id'</code> {string} block@id and select@name</li>\n<li><code>'name'</code> {string}</li>\n<li><code>'direction'</code> {string} bottom / top — open default direction</li>\n<li><code>'class'</code> {array} <code>['my_class1', 'my_class2']</code></li>\n<li><code>'disabled'</code> {boolean}</li>\n<li><code>'maxHeight'</code> {Number|String} number of visible items or string value of the max-height like '10em'</li>\n<li><code>'within'</code> {string} '...' - id attr of the container where listing tries to fit in (window default)</li>\n<li><code>'items'</code> {array}  - each object in array could have text, value and selected fields\n<ul><li><code>'text'</code> {string} text of option</li>\n<li><code>'value'</code> {string} value of option</li>\n<li><code>'icon'</code> {string} 'three-dots'</li>\n<li><code>'selected'</code> {boolean}</li>\n<li><code>'group'</code> {array} - group of options, array of items in <code>optgroup</code></li></ul></li>\n</ul>\n\n<h4>Example</h4>\n\n<div class=\"highlight\"><pre lang=\"\">nb-select( {\n  'size': 's'\n  'id': 'select1'\n  'class': 'my-sp-class'\n  'attrs': {\n        'name': 'my-name'\n   }\n  'theme': 'dark'\n  'items': [\n      {\n          'text': 'Карта'\n          'value': 'option1'\n          'selected': 'true'\n      }\n      {\n          'text': 'Спутник'\n          'value': 'option2'\n      }\n      {\n          'text': 'Гибрид'\n          'value': 'option3'\n      }\n      {\n          'text': 'Ещё'\n          'value': 'option4'\n          'icon': 'three-dots'\n      }\n        'text': 'Группа'\n        'group': [\n              {\n                  'text': 'Супер Карта'\n                  'value': 'option4'\n              }\n              {\n                  'text': 'Супер Спутник'\n                  'value': 'option5'\n              }\n              {\n                  'text': 'Супер Гибрид'\n                  'value': 'option6'\n              }\n        ]\n    }\n  ]\n})\n</pre></div>"
      },
      {
        "tags": [],
        "description": {
          "full": "<h2>JS</h2>\n\n<h3>jQuery UI Depends:</h3>\n\n<ul>\n<li>jquery.ui.autocomplete.js</li>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n<li>jquery.ui.position.js</li>\n<li>jquery.ui.menu.js</li>\n</ul>",
          "summary": "<h2>JS</h2>\n\n<h3>jQuery UI Depends:</h3>",
          "body": "<ul>\n<li>jquery.ui.autocomplete.js</li>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n<li>jquery.ui.position.js</li>\n<li>jquery.ui.menu.js</li>\n</ul>"
        },
        "ignore": false
      },
      {
        "tags": [
          {
            "type": "augments",
            "otherClass": "nb.block.Base"
          }
        ],
        "description": {
          "full": "<p>@class nb.block.Select</p>",
          "summary": "<p>@class nb.block.Select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "nb.define('select', {\n    events: {\n        'click': '_onclick'\n        //'open' { event, ui}\n        //'close' { event, ui}\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-inited'"
          },
          {
            "type": "constructor",
            "string": ""
          }
        ],
        "description": {
          "full": "<p>Init select</p>",
          "summary": "<p>Init select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "oninit: function() {\n        this.$control = this.$node.find('select');\n        this.$dropdown = this.$node.children('.nb-select__dropdown').appendTo('body');\n        this.data = this.nbdata();\n\n        this._updateFromSelect();\n\n        // degradation to native control in IE < 9\n        if (nb.IE_LT9) {\n            var that = this;\n            this.$control.on('change', function(e) {\n                that.setState({\n                    value: e.target.value\n                });\n            });\n        } else {\n            // preparing control depending on configuration and content\n            this.controlPrepare();\n        }\n\n        this.trigger('nb-inited', this);\n    },"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>preparing control depending on configuration and content</p>",
          "summary": "<p>preparing control depending on configuration and content</p>",
          "body": ""
        },
        "ignore": true,
        "code": "controlPrepare: function() {\n        var that = this;\n        // preparing position parameters for popup from direction data\n        var position = {};\n        position.collision = 'flip';\n\n        if (that.data.within) {\n            position.within = that.data.within;\n        }\n\n        if (that.data.direction == 'top') {\n            position.my = \"left bottom\";\n            position.at = \"left top\";\n\n        } else {\n            position.my = \"left top\";\n            position.at = \"left bottom\";\n        }\n\n        // select JUI control init\n        this.$node.autocomplete({\n            delay: 0,\n            minLength: 0,\n            autoFocus: false,\n            position: position,\n            appendTo: that.$dropdown,\n            source: function(request, response) {\n                response(that.$control.children(['option', 'optgroup']).map(function() {\n                    var returnObj;\n                    var $this = $(this);\n\n                    if (this.tagName == 'OPTGROUP') {\n                        returnObj = {\n                            type: 'group',\n                            label: $this.attr('label'),\n                            option: this,\n                            group: $this.children('option').map(function() {\n                                return {\n                                    label: $(this).text(),\n                                    value: $(this).val(),\n                                    option: this\n                                };\n                            })\n                        };\n                    } else {\n                        var icon = $this.data('icon');\n                        returnObj = {\n                            label: $this.text(),\n                            value: $this.val(),\n                            option: this\n                        };\n\n                        if (icon) {\n                            returnObj['icon'] = icon;\n                        }\n                    }\n\n                    return returnObj;\n                }));\n            },\n            select: function(event, ui) {\n\n                if (ui.item.type != 'group') {\n                    ui.item.option.selected = true;\n\n                    that.$jUI._trigger('selected', event, {\n                        item: ui.item.option\n                    });\n                }\n            },\n            // delegate handler on 'outer' click on open\n            open: function() {\n                that.$jUI._on(that.$jUI.document, {\n                    // on 'outer' mousedown close control\n                    mousedown: function(e) {\n                        if (e.which == 1 && !$.contains(that.$jUI.element.get(0), e.target) && !$.contains(that.$dropdown[0], e.target)) {\n                            this.close();\n                        }\n                    }\n                });\n                that.trigger('nb-opened', that);\n            },\n\n            close: function() {\n                that.$jUI._off(that.$jUI.document, 'mousedown');\n                that.trigger('nb-closed', that);\n            }\n        }).addClass('ui-widget ui-widget-content');\n\n        that.$jUI = that.$node.data('uiAutocomplete');\n\n\n        // redefine one menu item rendering method, fires every time, then popup opening\n        that.$jUI._renderItem = function(ul, item) {\n            var $itemNode = $('<li class=\"nb-select__item\"></li>');\n\n            if (item.option.selected) {\n                $itemNode.addClass('nb-select__item_selected_yes');\n            }\n\n            if (item.type == 'group') {\n\n                $itemNode.addClass('nb-select__item_type_group');\n                var $innerUL = $('<ul></ul>');\n\n                item.group.each(function(index, item) {\n                    that.$jUI._renderItem($innerUL, item);\n                });\n\n                $itemNode.append($innerUL);\n            }\n\n            $itemNode.data('ui-autocomplete-item', item);\n\n            var $itemNodeContent = $('<a></a>');\n            var $itemText = $('<span class=\"nb-select__text\"></span>').text(item.label).appendTo($itemNodeContent);\n            if (item.icon) {\n                $itemText.prepend('<img src=\"//yandex.st/lego/_/La6qi18Z8LwgnZdsAr1qy1GwCwo.gif\" class=\"nb-icon nb-icon_' + item.icon + '\">');\n            }\n            $itemNode\n                .append($itemNodeContent)\n                .appendTo(ul);\n\n            return $itemNode;\n        };\n\n        // redefine valueMethod, extend with button text changing and fallback select value changing\n        // if value not provided, return current value of fallback select\n        that.$jUI.valueMethod = function(value) {\n\n            if (typeof value === 'string') {\n                var text = that.$control.find('option[value=\"' + value + '\"]').text();\n                that.setState({\n                    value: value,\n                    text: text\n                });\n            }\n            return that.$selected.val();\n        };\n\n        // safe original function\n        that.$jUI.__resizeMenu = that.$jUI._resizeMenu;\n\n        that.$jUI._resizeMenu = function() {\n            // set maxHeight before the menu is displayed\n            if (that.data.maxheight) {\n                that._setMaxHeight(that.data.maxheight);\n            }\n\n            this.__resizeMenu();\n        };\n\n        that.$jUI.menu.element.on('click', function(evt) {\n            evt.stopPropagation();\n        });\n    },"
      },
      {
        "tags": [
          {
            "type": "private",
            "string": ""
          }
        ],
        "description": {
          "full": "<p>Save value and text from <select> node.</p>",
          "summary": "<p>Save value and text from <select> node.</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "_updateFromSelect: function() {\n        // get selected <option/>\n        this.$selected = this.$control.children(':selected');\n\n        this.value = this.$selected.val();\n        // &nbsp; - to prevent button from collapse if no text on <option/>\n        this.text = this.$selected.text() || '&nbsp;';\n\n        this._setText(this.text);\n    },\n\n    _onclick: function(evt) {\n        if (this.$node && this.$node.data('uiAutocomplete')) {\n            evt.preventDefault();\n            // close if already visible\n            if (this.$node.data('uiAutocomplete') && this.$node.autocomplete('widget').css('display') == 'block') {\n                this.close();\n                return;\n            }\n\n            if (this.isEnabled()) {\n                this.open();\n                this.$node.focus();\n            }\n        }\n    },\n\n    _setText: function(text) {\n        this.$node.find('.nb-button__text').text(text);\n    },\n\n    _setMaxHeight: function(maxheight) {\n        var height;\n        if (/^\\d+$/.test(maxheight)) {\n            var item = this.$jUI.menu.element.find('.nb-select__item').first();\n            height = parseInt(item.height()) * maxheight;\n        } else {\n            height = maxheight;\n        }\n\n        this.$jUI.menu.element.css({\n            'max-height': height,\n            'overflow-y': 'auto',\n            'overflow-x': 'hidden'\n        });\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-rendered'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Render dropdown of the select</p>",
          "summary": "<p>Render dropdown of the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "render: function() {\n        if (!this.isEnabled()) {\n            return this;\n        }\n\n        // pass empty string as value to search for, displaying all results\n        this.$node.autocomplete('search', '');\n\n        this.trigger('nb-rendered', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-opened'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Open dropdown of the select</p>",
          "summary": "<p>Open dropdown of the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "open: function() {\n        if (this.$node && this.$node.data('uiAutocomplete') && this.isEnabled()) {\n            this.render();\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-closed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Close dropdown of the select</p>",
          "summary": "<p>Close dropdown of the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "close: function() {\n        if (this.$node && this.$node.data('uiAutocomplete')) {\n            this.$node.autocomplete('close');\n            this.trigger('nb-closed', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "params",
            "description": "— `{ text: '..', value: '..'}`"
          },
          {
            "type": "fires",
            "string": "'nb-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Changes a value of control, text on the button and select value it the fallback</p>",
          "summary": "<p>Changes a value of control, text on the button and select value it the fallback</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setState: function(params) {\n        params = params || {};\n\n        if (this.value !== params.value) {\n            var selected;\n\n            if (params.value) {\n                selected = this.$control.find('option[value=\"' + params.value + '\"]');\n            } else {\n                selected = this.$control.find('option:contains(' + params.text + ')');\n            }\n\n            if (selected.length !== 0) {\n                this.$selected.prop('selected', false);\n\n                this.$selected = selected;\n\n                this.$selected.prop('selected', true);\n\n                this.value = this.$selected.val();\n\n                this.text = this.$selected.text();\n\n                this._setText(this.text);\n\n                this.trigger('nb-changed', this);\n\n                this.$control.val(params.value);\n\n            }\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "`{value: '..', text: '..'}`"
          }
        ],
        "description": {
          "full": "<p>Returns state of the select</p>",
          "summary": "<p>Returns state of the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getState: function() {\n        return {\n            value: this.value,\n            text: this.text\n        };\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String|Object} name"
          }
        ],
        "description": {
          "full": "<p>Get name of the select</p>",
          "summary": "<p>Get name of the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getName: function() {\n        return this.$control.prop('name');\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "string"
            ],
            "name": "name",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-name-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Changes a value of control, text on the button and select value it the fallback</p>",
          "summary": "<p>Changes a value of control, text on the button and select value it the fallback</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setName: function(name) {\n        this.$control.prop('name', name);\n        this.trigger('nb-name-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Disables the select</p>",
          "summary": "<p>Disables the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n        if (this.isEnabled()) {\n            this.$node.addClass('nb-is-disabled');\n            if (!nb.IE_LT9) {\n                this.$node.autocomplete('disable');\n            }\n            this.$control.attr('disabled', 'disabled');\n            this.trigger('nb-disabled', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Enables the select</p>",
          "summary": "<p>Enables the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n        if (!this.isEnabled()) {\n            this.$node.removeClass('nb-is-disabled');\n            if (!nb.IE_LT9) {\n                this.$node.autocomplete('enable');\n            }\n            this.$control.removeAttr('disabled');\n            this.trigger('nb-enabled', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return state of the select</p>",
          "summary": "<p>Return state of the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n        return !this.$node.hasClass('nb-is-disabled');\n    },"
      },
      {
        "tags": [
          {
            "type": "params",
            "string": "{Array} source New source"
          },
          {
            "type": "fires",
            "string": "'nb-source-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set new items for select</p>",
          "summary": "<p>Set new items for select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setSource: function(source) {\n\n        if (!source) {\n            return this;\n        }\n\n        if (!(source instanceof Array)) {\n            source = [source];\n        }\n\n        // find all selected items\n        var selected = [];\n        source.forEach(function(item) {\n            if (item.selected) {\n                selected.push(item);\n            }\n        });\n\n        // leave only last selected item (this is native browser behaviour)\n        selected.slice(0, -1).forEach(function(item) {\n            item.selected = false;\n        });\n\n        // render options with yate to prevent XSS\n        var html = yr.run(this.getYateModuleName(), {\n            items: source\n        }, 'nb-select-options');\n\n        // set new source for select\n        this.$control.empty().append(html);\n\n        this._updateFromSelect();\n        this.trigger('nb-source-changed', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Array} source"
          }
        ],
        "description": {
          "full": "<p>Get items from select</p>",
          "summary": "<p>Get items from select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getSource: function() {\n        return $.map(this.$control.children('option'), function(node) {\n            var $node = $(node);\n            return {\n                text: $node.text(),\n                value: $node.val(),\n                selected: $node.prop('selected')\n            };\n        });\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Array",
              "Object"
            ],
            "name": "items",
            "description": ""
          },
          {
            "type": "param",
            "types": [
              "Number"
            ],
            "name": "index",
            "description": "to insert"
          },
          {
            "type": "fires",
            "string": "'nb-source-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Add items to select</p>",
          "summary": "<p>Add items to select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "addToSource: function(items, index) {\n        var source = this.getSource();\n\n        if (!(items instanceof Array)) {\n            items = [items];\n        }\n\n        var selectedItemValue = null;\n\n        var insertion = items.filter(function(item) {\n            var newItem = source.indexOf(item) === -1;\n            if (newItem) {\n                if (item.selected) {\n                    // stores last selected item\n                    selectedItemValue = item.value;\n                }\n                return true;\n            }\n            return false;\n        }, this);\n\n        if (isNaN(index)) {\n            index = source.length;\n        }\n\n        insertion.forEach(function(item, i) {\n            source.splice(index + i, 0, item);\n        }, this);\n\n        this.setSource(source);\n\n        // set state from new items\n        if (selectedItemValue) {\n            // use #setState() to fire 'nb-changed' event\n            this.setState({\n                value: selectedItemValue\n            });\n        }\n        this.trigger('nb-source-changed', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Array",
              "Object",
              "number"
            ],
            "name": "items",
            "description": "or index"
          },
          {
            "type": "fires",
            "string": "'nb-source-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Remove items to select</p>",
          "summary": "<p>Remove items to select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "removeFromSource: function(param) {\n        var source = this.getSource();\n\n        var index;\n\n        if (typeof param == 'number' || typeof param == 'string') {\n            index = parseInt(param);\n        } else if (!(param instanceof Array)) {\n            param = [param];\n        }\n\n        if (index || index === 0) {\n            source.splice(index, 1);\n        } else {\n            param.forEach(function(item) {\n                source = source.filter(function(obj) {\n                    return obj.text != item.text && obj.value != item.value;\n                });\n            }, this);\n        }\n\n        this.setSource(source);\n        this.trigger('nb-source-changed', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-focused'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Focus the select</p>",
          "summary": "<p>Focus the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n        if (this.isEnabled()) {\n            this.$node.focus();\n        }\n        this.trigger('nb-focused', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-blured'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Blur the select</p>",
          "summary": "<p>Blur the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n        if (this.isEnabled()) {\n            this.$node.blur();\n        }\n        this.trigger('nb-blured', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "option",
            "description": "`{name: value}` имя и значение опцииопции"
          },
          {
            "type": "fires",
            "string": "'nb-option-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Sets option to the jUI widget<br /><a href='http://api.jqueryui.com/autocomplete/#method-option'>http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "summary": "<p>Sets option to the jUI widget<br /><a href='http://api.jqueryui.com/autocomplete/#method-option'>http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setOption: function(option) {\n        this.$node.autocomplete('option', option);\n        this.trigger('nb-option-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "option",
            "description": ""
          },
          {
            "type": "returns",
            "string": "{String} option value"
          }
        ],
        "description": {
          "full": "<p>Gets option of the jUI widget<br /><a href='http://api.jqueryui.com/autocomplete/#method-option'>http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "summary": "<p>Gets option of the jUI widget<br /><a href='http://api.jqueryui.com/autocomplete/#method-option'>http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getOption: function(option) {\n        return this.$node.autocomplete('option', option);\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the select</p>",
          "summary": "<p>Destroy the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n        if (this.$node && this.$node.data('uiAutocomplete')) {\n            this.$node.autocomplete('destroy');\n            this.$dropdown.empty().appendTo(this.$node);\n        }\n        this.trigger('nb-destroyed', this);\n        this.nbdestroy();\n    }\n}, 'base');"
      }
    ]
  },
  {
    "block": "slider",
    "data": [
      {
        "md": "<div class=\"highlight\"><pre lang=\"\">    nb-slider()\n</pre></div>\n\n<ul>\n<li>size: s</li>\n<li>value: 0</li>\n<li>orientation: horiz</li>\n<li>type: range</li>\n</ul>\n\n<h3>Optional attributes</h3>\n\n<ul>\n<li><code>'size'</code> {string} <code>m / s</code></li>\n<li><code>'value'</code> {number}</li>\n<li><code>'id'</code> {string} block@id</li>\n<li><code>'class'</code> {array} <code>['my_class1', 'my_class2']</code></li>\n<li><code>'disabled'</code> {boolean}</li>\n</ul>\n\n<h4>Example</h4>\n\n<div class=\"highlight\"><pre lang=\"\">nb-slider({\n    'size': 's'\n    'class': 'js-super-class'\n    'value': 50\n    'disabled': true()\n    'id': 's1'\n})\n</pre></div>"
      },
      {
        "tags": [],
        "description": {
          "full": "<h3>jQuery UI Depends:</h3>\n\n<ul>\n<li>jquery.ui.slider.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.mouse.js</li>\n<li>jquery.ui.widget.js</li>\n</ul>",
          "summary": "<h3>jQuery UI Depends:</h3>\n\n<ul>\n<li>jquery.ui.slider.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.mouse.js</li>\n<li>jquery.ui.widget.js</li>\n</ul>",
          "body": ""
        },
        "ignore": false,
        "code": "nb.define('slider', {"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-inited'"
          }
        ],
        "description": {
          "full": "<p>Init the slider</p>",
          "summary": "<p>Init the slider</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "oninit: function() {\n        var that = this;\n\n        this.data = this.nbdata();\n        this.$control = this.$node.find('.nb-slider__fallback');\n        this.$body = this.$node.children('.nb-slider__body');\n\n        this.$body.show();\n\n        this.$body.slider({\n            range: 'min',\n            disabled: this.$node.hasClass('nb-is-disabled'),\n            value: parseFloat(this.data.value),\n            change: function(e, ui) {\n                this.$control.val(ui.value);\n            }.bind(this)\n        });\n\n        this.$body.on('slidestop', function(event, ui) {\n            that.trigger('nb-slider_slidestop', ui.value);\n        });\n\n        this.$body.on('slidestart', function(event, ui) {\n            that.trigger('nb-slider_slidestart', ui.value);\n        });\n\n        this.$body.on('slide', function(event, ui) {\n            that.trigger('nb-slider_slide', ui.value);\n        });\n\n\n        this.trigger('nb-inited', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Number"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-value-set'"
          }
        ],
        "description": {
          "full": "<p>Set specified value to slider</p>",
          "summary": "<p>Set specified value to slider</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setValue: function(value) {\n        if (this.$body.slider('option', 'disabled')) {\n            return this;\n        }\n        this.$body.slider('value', value);\n        this.trigger('nb-value-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Number"
            ],
            "description": "value"
          }
        ],
        "description": {
          "full": "<p>Return slider's value</p>",
          "summary": "<p>Return slider's value</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getValue: function() {\n        return this.$body.slider('option', 'value');\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Number"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-name-set'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb.block"
          }
        ],
        "description": {
          "full": "<p>Set name of the fallback input</p>",
          "summary": "<p>Set name of the fallback input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setName: function(value) {\n        this.$control.prop('name', value);\n        this.trigger('nb-name-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "String",
              "Boolean"
            ],
            "description": "name"
          }
        ],
        "description": {
          "full": "<p>Get name of the fallback input</p>",
          "summary": "<p>Get name of the fallback input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getName: function() {\n        return this.$control.prop('name');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb.block"
          }
        ],
        "description": {
          "full": "<p>Set disabled state</p>",
          "summary": "<p>Set disabled state</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n        this.$node.addClass('nb-is-disabled');\n        this.$body.slider('disable');\n        this.trigger('nb-disabled', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb.block"
          }
        ],
        "description": {
          "full": "<p>Reset disabled state</p>",
          "summary": "<p>Reset disabled state</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n        this.$node.removeClass('nb-is-disabled');\n        this.$body.slider('enable');\n        this.trigger('nb-enabled', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Boolean"
            ],
            "description": ""
          }
        ],
        "description": {
          "full": "<p>Return state of the slider</p>",
          "summary": "<p>Return state of the slider</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n        return !this.$body.slider('option', 'disabled');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the slider</p>",
          "summary": "<p>Destroy the slider</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n        if (this.$body && this.$body.data('uiSlider')) {\n            this.$body.slider('destroy');\n        }\n        this.trigger('nb-destroyed', this);\n        this.nbdestroy();\n    }\n}, 'base');"
      }
    ]
  },
  {
    "block": "suggest",
    "data": [
      {
        "md": "<p>Suggest element.</p>\n\n<div class=\"highlight\"><pre lang=\"\">nb-suggest(options)\n</pre></div>\n\n<h3>Options</h3>\n\n<ul>\n<li><code>'id'</code> {string}</li>\n<li><code>'name'</code> {string}</li>\n<li><code>'attrs'</code> {object} - attrubutes for suggest node</li>\n<li><code>'attrsInput'</code> {object} - attrubutes for input node</li>\n<li><code>'disabled'</code> {boolean}</li>\n<li><code>'source'</code>: {array} — source data for suggest</li>\n<li><code>'highlight'</code>: {boolean} — hightlight results or not</li>\n<li><code>'size'</code> {string}  - input size. <code>'s'</code> (no other sizes supported)</li>\n<li><code>'countMax'</code> {string}  - The number of elements in which the drop-down list appears scroll (default = 10)</li>\n<li><code>'classSuggest'</code> {string} — additional class for suggest popup</li>\n<li><code>'content'</code> {string} — initial content og suggest field</li>\n</ul>\n\n<h3>Examples</h3>\n\n<div class=\"highlight\"><pre lang=\"\">nb-suggest({\n     'source': [\n        'Вариант 1'\n        'Вариант 2'\n     ]\n     'highlight': true()\n })\n</pre></div>"
      },
      {
        "tags": [],
        "description": {
          "full": "<h3>jQuery UI Depends:</h3>\n\n<ul>\n<li>jquery.ui.autocomplete.js</li>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n<li>jquery.ui.position.js</li>\n<li>jquery.ui.menu.js</li>\n</ul>",
          "summary": "<h3>jQuery UI Depends:</h3>\n\n<ul>\n<li>jquery.ui.autocomplete.js</li>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n<li>jquery.ui.position.js</li>\n<li>jquery.ui.menu.js</li>\n</ul>",
          "body": ""
        },
        "ignore": false,
        "code": "(function() {"
      },
      {
        "tags": [
          {
            "type": "namespace",
            "string": "jquery.ui.suggest"
          },
          {
            "type": "extends",
            "string": "{jquery.ui.autocomplete} http://api.jqueryui.com/autocomplete/"
          },
          {
            "type": "description",
            "string": ""
          },
          {
            "type": "",
            "string": "Саджест это блок сотоящий из инпута и выпадающего списка."
          },
          {
            "type": "",
            "string": "При вводе какого-либо значения в инпут это значение матчится на список"
          },
          {
            "type": "",
            "string": "слов из источника данных, и подходящие элементы из исходного списка"
          },
          {
            "type": "",
            "string": "показываются в выпадающем списке, в котором пользователь может выбрать"
          },
          {
            "type": "",
            "string": "нужный ему элемент."
          },
          {
            "type": "",
            "string": "После выбора элемента значение инпута меняется на значение выбранного элемента"
          },
          {
            "type": "",
            "string": ""
          },
          {
            "type": "",
            "string": "Поддерживаемые события:"
          },
          {
            "type": "",
            "string": "nb-type – всплывает при вводе значения в инпут"
          },
          {
            "type": "",
            "string": "nb-select – всплывает при выборе значения из саджеста"
          },
          {
            "type": "",
            "string": "nb-keypress-enter – всплывает при нажатии на энетер и отсутвии саджеста"
          }
        ],
        "description": {
          "full": "<p>Саджест</p>",
          "summary": "<p>Саджест</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true
      },
      {
        "tags": [
          {
            "type": "description",
            "string": ""
          },
          {
            "type": "",
            "string": "Эти опции могут быть определены в yate шаблонах при описании наноблока."
          },
          {
            "type": "",
            "string": "Опции можно менять в рантайме через событие setOption"
          },
          {
            "type": "",
            "string": ""
          },
          {
            "type": "example",
            "string": ""
          },
          {
            "type": "",
            "string": "var sug = nb.find('#mysuggest');"
          },
          {
            "type": "",
            "string": "sug.setOption({ 'source','http://mydomain.com/user/search'});"
          },
          {
            "type": "",
            "string": ""
          },
          {
            "type": "type",
            "types": [
              "Object"
            ]
          }
        ],
        "description": {
          "full": "<p>Опции инициализации саджеста</p>",
          "summary": "<p>Опции инициализации саджеста</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "var optionsSuggest = {",
        "ctx": {
          "type": "declaration",
          "name": "optionsSuggest",
          "value": "{",
          "string": "optionsSuggest"
        }
      },
      {
        "tags": [
          {
            "type": "description",
            "string": "См. http://api.jqueryui.com/autocomplete/#option-source"
          },
          {
            "type": "",
            "string": ""
          },
          {
            "type": "type",
            "types": [
              "(String",
              "Array",
              "Function)"
            ]
          }
        ],
        "description": {
          "full": "<p>Истоник данных</p>",
          "summary": "<p>Истоник данных</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "source: null,"
      },
      {
        "tags": [
          {
            "type": "type",
            "types": [
              "Number"
            ]
          }
        ],
        "description": {
          "full": "<p>Количество элеметов, при котором в выпадающем списке появляется скролл</p>",
          "summary": "<p>Количество элеметов, при котором в выпадающем списке появляется скролл</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "countMax: 10,"
      },
      {
        "tags": [
          {
            "type": "description",
            "string": ""
          },
          {
            "type": "",
            "string": "Указывает из какого шаблона брать верстку для элемента выпадающего списка."
          },
          {
            "type": "",
            "string": "См. файл suggest.yate: match /[.type].item nb-suggest"
          },
          {
            "type": "",
            "string": ""
          },
          {
            "type": "type",
            "types": [
              "String"
            ]
          }
        ],
        "description": {
          "full": "<p>Тип саджеста</p>",
          "summary": "<p>Тип саджеста</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "type: 'default',"
      },
      {
        "tags": [
          {
            "type": "type",
            "types": [
              "Boolean"
            ]
          }
        ],
        "description": {
          "full": "<p>Включение или отключение выделения жирным начертанием результатов<br />матчинга в выпадающем списке.</p>",
          "summary": "<p>Включение или отключение выделения жирным начертанием результатов<br />матчинга в выпадающем списке.</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "highlight: false,"
      },
      {
        "tags": [
          {
            "type": "description",
            "string": "Применятся на размер элементов в выпадающем списке."
          },
          {
            "type": "",
            "string": ""
          },
          {
            "type": "type",
            "types": [
              "String"
            ]
          }
        ],
        "description": {
          "full": "<p>Размер блока.</p>",
          "summary": "<p>Размер блока.</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "size: 's',"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>Количесвто введенных символов, после которого начинать поиск слов</p>",
          "summary": "<p>Количесвто введенных символов, после которого начинать поиск слов</p>",
          "body": ""
        },
        "ignore": true,
        "code": "minLength: 2\n    };\n\n    $.widget(\"ui.suggest\", $.ui.autocomplete, {\n        options: optionsSuggest,\n\n        _renderMenu: function(ul, items) {\n            var that = this;\n            var html = '';\n\n            $.each(items, function(index, item) {\n                html += that._renderItem(item);\n            });\n\n            $(html).appendTo(ul);\n\n            ul.children('li').each(function(index) {\n                $(this).data(\"ui-autocomplete-item\", items[index]);\n            });\n        },\n\n        _renderItem: function(item) {\n            var clone = $.extend({}, item);\n\n            if (this.options.highlight) {\n                if (typeof highlightings[this.options.type] == 'function') {\n                    highlightings[this.options.type](clone, this._value());\n                } else if (typeof this.options.highlight == 'function') {\n                    this.options.highlight(clone, this._value());\n                }\n            }\n\n            clone.labelContent = clone.label;\n            delete clone.label;\n\n            var renderData = {\n                item: clone,\n                type: this.options.type,\n                size: this.options.size\n            };\n\n            if ($.isFunction(this.options.renderItem)) {\n                return this.options.renderItem(renderData);\n            } else {\n                return '<li><a href=\"#\">' + clone.labelContent + '</a></li>';\n            }\n        },\n\n        _suggest: function(items) {\n            this._super(items);\n\n            if (this.options.countMax && !this._heightMax) {\n                this._heightMax = this.menu.element.children().eq(0).height() * this.options.countMax;\n                this.menu.element.css({\n                    'max-height': this._heightMax,\n                    'overflow-y': 'auto',\n                    'overflow-x': 'hidden'\n                });\n            }\n        },\n\n        search: function(value, event) {\n            this._trigger('_search');\n\n            return this._super(value, event);\n        }\n    });\n\n    var highlightings = {\n        'default': function(item, term) {\n            var matcher = new RegExp('(' + $.ui.autocomplete.escapeRegex(term) + ')', \"i\");\n            item.label = item.label.replace(matcher, '<b>$1</b>');\n        },\n\n        'username': function(item, term) {\n            var matcher = new RegExp('(' + $.ui.autocomplete.escapeRegex(term) + ')', \"ig\");\n\n            item.usernameHighlighted = item.username.replace(matcher, '<span class=\"nb-suggest__hl\">$1</span>');\n\n            if (typeof item.email == 'string') {\n                item.emailHighlighted = item.email.replace(matcher, '<span class=\"nb-suggest__hl\">$1</span>');\n            }\n        }\n    };\n\n    nb.define('suggest', {"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-suggest_inited'"
          }
        ],
        "description": {
          "full": "<p>Init select</p>",
          "summary": "<p>Init select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "oninit: function() {\n            var that = this;\n            var nodeTagName = this.$node[0].tagName.toLowerCase();\n\n            if (nodeTagName === 'input' || nodeTagName === 'textarea') {\n                this.$control = this.$node;\n            } else {\n                this.$control = this.$node.find('input');\n                this.input = this.children()[0];\n            }\n\n            var source = this.$node.data('source');\n\n            this.$control.on('keydown.nb-suggest', function(e) {\n                var keyCode = $.ui.keyCode;\n\n                if ($.inArray(e.keyCode, [ keyCode.ENTER, keyCode.NUMPAD_ENTER ]) !== -1) {\n                    if (!this.$jUI.data().uiSuggest.menu.active) {\n                        this.trigger('nb-keypress-enter', this, this.getValue());\n                    }\n                }\n            }.bind(this));\n\n            this.$jUI = this.$control.suggest({\n                source: source,\n                countMax: this.$node.data('countMax'),\n                type: this.$node.data('type'),\n                size: this.$node.data('size'),\n                highlight: this.$node.data('highlight'),\n                minLength: this.$node.data('minLength'),\n                renderItem: function(data) {\n                    return yr.run(that.getYateModuleName(), data, 'nb-suggest');\n                }\n            });\n\n            this.$suggest = this.$jUI.data().uiSuggest.menu.element;\n\n            this.$suggest.addClass(this.$node.data('class-suggest'));\n\n            this.$jUI.on('suggest_search.nb-suggest', function() {\n                this.trigger('nb-type', this, this.getValue());\n            }.bind(this));\n\n            this.$jUI.on('suggestselect.nb-suggest', function(e, item) {\n                this.$selected = item.item;\n                this.trigger('nb-select', this, item.item);\n            }.bind(this));\n\n            this.trigger('nb-inited', this);\n        },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": ""
          }
        ],
        "description": {
          "full": "<p>Get selected item from suggest</p>",
          "summary": "<p>Get selected item from suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getSelected: function() {\n            return this.$selected;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "option",
            "description": "`{ name: value }` имя и значение опции"
          },
          {
            "type": "fires",
            "string": "'nb-option-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Sets option to the jUI widget<br /><a href='http://api.jqueryui.com/autocomplete/#method-option'>http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "summary": "<p>Sets option to the jUI widget<br /><a href='http://api.jqueryui.com/autocomplete/#method-option'>http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setOption: function(option) {\n            this.$jUI.suggest('option', option);\n            this.trigger('nb-option-set', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "option",
            "description": ""
          },
          {
            "type": "returns",
            "string": "{String} option value"
          }
        ],
        "description": {
          "full": "<p>Gets option of the jUI widget<br /><a href='http://api.jqueryui.com/autocomplete/#method-option'>http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "summary": "<p>Gets option of the jUI widget<br /><a href='http://api.jqueryui.com/autocomplete/#method-option'>http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getOption: function(option) {\n            return this.$jUI.suggest('option', option);\n        },"
      },
      {
        "tags": [
          {
            "type": "params",
            "string": "{Array} source New source"
          },
          {
            "type": "fires",
            "string": "'nb-source-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set new items for suggest</p>",
          "summary": "<p>Set new items for suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setSource: function(source) {\n            this.setOption({'source': source});\n            this.trigger('nb-source-set', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Array} source"
          }
        ],
        "description": {
          "full": "<p>Get items from suggest</p>",
          "summary": "<p>Get items from suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getSource: function() {\n            return this.getOption('source');\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-closed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Скрывает список предложений</p>",
          "summary": "<p>Скрывает список предложений</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "close: function() {\n            this.$jUI.suggest('close');\n            this.trigger('nb-closed', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Disables the suggest</p>",
          "summary": "<p>Disables the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n            if (this.isEnabled()) {\n                if (this.input) {\n                    this.input.disable();\n                } else {\n                    this.$control.prop('disabled', true);\n                }\n                this.$node.addClass('nb-is-disabled');\n                this.$jUI.suggest('disable');\n                this.trigger('nb-disabled', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Enables the suggest</p>",
          "summary": "<p>Enables the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n            if (!this.isEnabled()) {\n                if (this.input) {\n                    this.input.enable();\n                } else {\n                    this.$control.prop('disabled', false);\n                }\n                this.$node.removeClass('nb-is-disabled');\n                this.$jUI.suggest('enable');\n                this.trigger('nb-enabled', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return state of the suggest</p>",
          "summary": "<p>Return state of the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n            return !this.$node.hasClass('nb-is-disabled');\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-focused'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Focus the suggest</p>",
          "summary": "<p>Focus the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n            if (this.isEnabled()) {\n                if (this.input) {\n                    this.input.focus();\n                } else {\n                    this.$control.focus();\n                }\n            }\n            this.trigger('nb-focused', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String|Object} name"
          }
        ],
        "description": {
          "full": "<p>Get name of the suggest</p>",
          "summary": "<p>Get name of the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getName: function() {\n            return this.$control.prop('name');\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "string"
            ],
            "name": "name",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-name-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set name of the suggest</p>",
          "summary": "<p>Set name of the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setName: function(name) {\n            this.$control.prop('name', name);\n            this.trigger('nb-name-set', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-blured'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Blur the suggest</p>",
          "summary": "<p>Blur the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n            if (this.isEnabled()) {\n                if (this.input) {\n                    this.input.blur();\n                } else {\n                    this.$control.blur();\n                }\n            }\n            this.trigger('nb-blured', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String | Number}"
          }
        ],
        "description": {
          "full": "<p>Get current value of the suggest</p>",
          "summary": "<p>Get current value of the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getValue: function() {\n            return this.$control.val();\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-value-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Get current value of the suggest</p>",
          "summary": "<p>Get current value of the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setValue: function(value) {\n            if (this.isEnabled()) {\n                this.$control.val(value);\n                this.trigger('nb-value-set', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "string",
              "number"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Search value in the source array and open suggest popup</p>",
          "summary": "<p>Search value in the source array and open suggest popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "search: function(value) {\n            this.$jUI.suggest(\"search\", value);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the suggest</p>",
          "summary": "<p>Destroy the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n            if (this.$control && this.$jUI) {\n                var jUIData = this.$jUI.data();\n                this.$control.off('.nb-suggest');\n                this.$jUI.off('.nb-suggest');\n                if (jUIData && jUIData.uiSuggest) {\n                    this.$jUI.suggest('destroy');\n                }\n            }\n            this.trigger('nb-destroyed', this);\n            this.nbdestroy();\n        }\n\n    }, 'base');\n\n})();"
      }
    ]
  },
  {
    "block": "tabs",
    "data": [
      {
        "tags": [],
        "description": {
          "full": "<h3>jQuery UI Depends:</h3>\n\n<ul>\n<li>jquery.ui.tabs.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n</ul>",
          "summary": "<h3>jQuery UI Depends:</h3>",
          "body": "<ul>\n<li>jquery.ui.tabs.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n</ul>"
        },
        "ignore": false,
        "code": "nb.define('tabs', {\n    oninit: function() {\n        this.$node.tabs();\n    }\n}, 'base');"
      }
    ]
  },
  {
    "block": "toggler",
    "data": [
      {
        "md": "<h2>Yate</h2>\n\n<h3>Default toggler</h3>\n\n<div class=\"highlight\"><pre lang=\"\">nb-toggler()\n</pre></div>\n\n<ul>\n<li>leftText — On</li>\n<li>rightText — Off</li>\n<li>size — s</li>\n</ul>\n\n<h3>Optional settings</h3>\n\n<ul>\n<li><code>'id'</code> {string}</li>\n<li><code>'name'</code> {string}</li>\n<li><code>'disabled'</code> {boolean}</li>\n<li><code>'checked'</code> {boolean}</li>\n<li><code>'leftText'</code> {string} 'On'</li>\n<li><code>'rightText'</code> {string} 'Off'</li>\n</ul>\n\n<h3>Example</h3>\n\n<p>Turned on enabled toggler with custom a titles on the sides</p>\n\n<div class=\"highlight\"><pre lang=\"\">nb-toggler({\n    'leftText': 'yep!'\n    'rightText': 'nope :-('\n    'checked': true()\n})\n</pre></div>"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-inited'"
          }
        ],
        "description": {
          "full": "<p>Init the toggler</p>",
          "summary": "<p>Init the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "oninit: function() {\n        this.$control = this.$node.find('.nb-toggler__checkbox');\n        this.trigger('nb-inited', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "value",
            "description": "of the check state"
          },
          {
            "type": "fires",
            "string": "'nb-value-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set value of the toggler</p>",
          "summary": "<p>Set value of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setValue: function(value) {\n        this.$control.attr('value', value);\n        this.trigger('nb-value-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "String"
            ],
            "description": "value"
          }
        ],
        "description": {
          "full": "<p>Returns value of the toggler</p>",
          "summary": "<p>Returns value of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getValue: function() {\n        return this.$control.prop('value');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Toggle to the oppocite value<br />Do nothing if toggler is disabled</p>",
          "summary": "<p>Toggle to the oppocite value<br />Do nothing if toggler is disabled</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "toggle: function() {\n        if (this.isEnabled()) {\n            if (this.isChecked()) {\n                this.uncheck();\n            } else {\n                this.check();\n            }\n            this.trigger('nb-changed', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "String"
            ],
            "description": "value"
          }
        ],
        "description": {
          "full": "<p>Returns name of the toggler</p>",
          "summary": "<p>Returns name of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getName: function() {\n        return this.$control.attr('name');\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-name-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set name of the toggler</p>",
          "summary": "<p>Set name of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setName: function(value) {\n        this.$control.attr('name', value);\n        this.trigger('nb-name-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          }
        ],
        "description": {
          "full": "<p>Disable toggler</p>",
          "summary": "<p>Disable toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n        this.$control.prop('disabled', true);\n        this.$node.addClass('nb-is-disabled');\n        this.trigger('nb-disabled', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          }
        ],
        "description": {
          "full": "<p>Enable toggler</p>",
          "summary": "<p>Enable toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n        this.$control.prop('disabled', false);\n        this.$node.removeClass('nb-is-disabled');\n        this.trigger('nb-enabled', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return enable state of the toggler</p>",
          "summary": "<p>Return enable state of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n        return !this.$control.prop('disabled');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-focused'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Focus the input</p>",
          "summary": "<p>Focus the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n        if (this.isEnabled()) {\n            if (!this.$node.hasClass('is-focused')) {\n                this.$node.addClass('is-focused').focus();\n                this.focused = true;\n                this.$control.focus();\n                this.trigger('nb-focused', this);\n            }\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-blured'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Blur the input</p>",
          "summary": "<p>Blur the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n        this.$node.removeClass('is-focused').blur();\n        this.focused = false;\n        this.trigger('nb-blured', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return check state of the toggler</p>",
          "summary": "<p>Return check state of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isChecked: function() {\n        return this.$control.prop('checked');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-checked'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Checking toggler</p>",
          "summary": "<p>Checking toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "check: function() {\n        if (this.isEnabled() && !this.isChecked()) {\n            this.$control.prop({\n                'checked': true\n            });\n            this.$node.addClass('is-checked');\n            this.trigger('nb-checked', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-unchecked'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Unchecking toggler</p>",
          "summary": "<p>Unchecking toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "uncheck: function() {\n        if (this.isEnabled() && this.isChecked()) {\n            this.$control.prop({\n                'checked': false\n            });\n            this.$node.removeClass('is-checked');\n            this.trigger('nb-unchecked', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the toggler</p>",
          "summary": "<p>Destroy the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n        this.trigger('nb-destroyed', this);\n        this.nbdestroy();\n    }\n}, 'base');"
      }
    ]
  },
  {
    "block": "tooltip",
    "data": [
      {
        "tags": [],
        "description": {
          "full": "",
          "summary": "",
          "body": ""
        },
        "isPrivate": false,
        "code": "nb.define('tooltip-jq-toggler', {\n\n    //NOTES: из-за такого определения Factory._onevent постоянно долбится событиями\n    // но по другому (mouseeneter/leave) не сделать, потому что они случаться один раз на document\n    // как вариант для mouseenter/leave надо делать не $document.on(event), $document.on(event, '.nb')\n    events: {\n        'mouseover': 'onmouseenter'\n    },\n\n    'onmouseenter': function() {\n        if (this.$node.hasClass('nb-is-disabled')) {\n            return true;\n        }\n\n        var data = this.nbdata()[this.name];\n\n        var params = {\n            content: data.content,\n            items: '*',\n            tooltipClass: \"nb-tooltip nb-island nb-island_type_fly nb-island_padding_s\"\n        };\n\n        if (data.position) {\n            params.position = data.position;\n        }\n\n        this.$node.tooltip(params);\n        this.$node.tooltip(\"open\");\n    }\n\n}, 'base');"
      }
    ]
  },
  {
    "block": "user",
    "data": [
      {
        "tags": [],
        "description": {
          "full": "",
          "summary": "",
          "body": ""
        },
        "isPrivate": false,
        "code": "nb.define('user', {\n    events: {\n        'init': 'oninit'\n    },\n\n    oninit: function() {\n\n    }\n\n});"
      }
    ]
  }
]